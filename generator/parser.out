Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BREAK
    COMMENTVAR
    CONTINUE
    DELETE
    DMINUS
    DOT
    DPLUS
    ESC
    LSQUARE
    RSQUARE

Grammar

Rule 0     S' -> program
Rule 1     program -> include using_namespace_std block
Rule 2     program -> using_namespace_std block
Rule 3     block -> block_part block_part main_func
Rule 4     block -> main_func
Rule 5     block_part -> variable_def
Rule 6     block_part -> class
Rule 7     block_part -> function
Rule 8     block_part -> block_part block_part
Rule 9     using_namespace_std -> USING NAMESPACE STD SEMICOLON
Rule 10    main_func -> VOID MAIN LPARENTH RPARENTH LBRACE func_block RBRACE SEMICOLON
Rule 11    main_func -> INT MAIN LPARENTH RPARENTH LBRACE func_block RBRACE SEMICOLON
Rule 12    main_func -> INT MAIN LPARENTH RPARENTH LBRACE RBRACE SEMICOLON
Rule 13    parameters -> type VARNAME
Rule 14    parameters -> type VARNAME COMMA parameters
Rule 15    if_statement -> IF LPARENTH condition RPARENTH LBRACE func_block RBRACE else_block
Rule 16    if_statement -> IF LPARENTH condition RPARENTH LBRACE func_block RBRACE
Rule 17    else_block -> ELSE LBRACE func_block RBRACE
Rule 18    condition -> var_value comparator var_value
Rule 19    condition -> VARNAME comparator VARNAME
Rule 20    condition -> VARNAME comparator var_value
Rule 21    condition -> var_value comparator VARNAME
Rule 22    while_statement -> WHILE LPARENTH condition RPARENTH LBRACE func_block RBRACE
Rule 23    for_statement -> FOR LPARENTH INT VARNAME EQUAL INTVAR SEMICOLON VARNAME comparator INTVAR SEMICOLON VARNAME math_operator EQUAL INTVAR RPARENTH LBRACE func_block RBRACE
Rule 24    for_statement -> FOR LPARENTH SEMICOLON SEMICOLON RPARENTH LBRACE func_block RBRACE
Rule 25    class -> CLASS VARNAME LBRACE class_variable class_functions RBRACE SEMICOLON
Rule 26    class -> CLASS VARNAME LBRACE class_functions RBRACE SEMICOLON
Rule 27    class -> CLASS VARNAME LBRACE class_variable RBRACE SEMICOLON
Rule 28    return_statement -> RETURN var_value SEMICOLON
Rule 29    return_statement -> RETURN SEMICOLON
Rule 30    assign_var -> VARNAME EQUAL var_value SEMICOLON
Rule 31    assign_var -> VARNAME EQUAL calculation SEMICOLON
Rule 32    variable_def -> declare_var
Rule 33    variable_def -> declare_assign_var
Rule 34    declare_assign_var -> type VARNAME EQUAL var_value SEMICOLON
Rule 35    declare_assign_var -> type VARNAME EQUAL calculation SEMICOLON
Rule 36    declare_var -> type VARNAME SEMICOLON
Rule 37    class_variable -> access_modifier COLON variable_def
Rule 38    class_variable -> variable_def
Rule 39    class_variable -> assign_var
Rule 40    class_variable -> class_variable class_variable
Rule 41    class_functions -> access_modifier COLON function
Rule 42    class_functions -> function
Rule 43    class_functions -> class_functions class_functions
Rule 44    function -> return_type VARNAME LPARENTH parameters RPARENTH LBRACE func_block RBRACE
Rule 45    function -> return_type VARNAME LPARENTH RPARENTH LBRACE func_block RBRACE
Rule 46    access_modifier -> PUBLIC
Rule 47    access_modifier -> PRIVATE
Rule 48    access_modifier -> PROTECTED
Rule 49    func_block -> statement
Rule 50    func_block -> statement return_statement
Rule 51    func_block -> return_statement
Rule 52    statement -> variable_def
Rule 53    statement -> if_statement
Rule 54    statement -> while_statement
Rule 55    statement -> for_statement
Rule 56    statement -> print_out
Rule 57    statement -> cin_in
Rule 58    statement -> VARNAME EQUAL calculation SEMICOLON
Rule 59    statement -> assign_var
Rule 60    statement -> statement statement
Rule 61    print_out -> COUT cout_expression_string SEMICOLON
Rule 62    cout_expression_string -> cout_expression cout_expression_string
Rule 63    cout_expression_string -> cout_expression
Rule 64    cout_expression -> LBIT printable
Rule 65    printable -> var_value
Rule 66    printable -> VARNAME
Rule 67    printable -> ENDL
Rule 68    printable -> STRINGVAR
Rule 69    calculation -> number math_operator number
Rule 70    include -> HASH INCLUDE LTHAN VARNAME GTHAN
Rule 71    type -> INT
Rule 72    type -> FLOAT
Rule 73    type -> CHAR
Rule 74    type -> STRING
Rule 75    type -> BOOL
Rule 76    cin_in -> CIN RBIT VARNAME SEMICOLON
Rule 77    number -> INTVAR
Rule 78    number -> FLOATVAR
Rule 79    return_type -> type
Rule 80    return_type -> VOID
Rule 81    math_operator -> PLUS
Rule 82    math_operator -> MINUS
Rule 83    math_operator -> MUL
Rule 84    math_operator -> DIV
Rule 85    math_operator -> MOD
Rule 86    comparator -> GTHAN
Rule 87    comparator -> LTHAN
Rule 88    comparator -> LESS_EQUAL
Rule 89    comparator -> DEQUAL
Rule 90    comparator -> GREATER_EQUAL
Rule 91    comparator -> NOT_EQUAL
Rule 92    var_value -> INTVAR
Rule 93    var_value -> FLOATVAR
Rule 94    var_value -> STRINGVAR
Rule 95    var_value -> bool_value
Rule 96    bool_value -> TRUE
Rule 97    bool_value -> FALSE

Terminals, with rules where they appear

BOOL                 : 75
BREAK                : 
CHAR                 : 73
CIN                  : 76
CLASS                : 25 26 27
COLON                : 37 41
COMMA                : 14
COMMENTVAR           : 
CONTINUE             : 
COUT                 : 61
DELETE               : 
DEQUAL               : 89
DIV                  : 84
DMINUS               : 
DOT                  : 
DPLUS                : 
ELSE                 : 17
ENDL                 : 67
EQUAL                : 23 23 30 31 34 35 58
ESC                  : 
FALSE                : 97
FLOAT                : 72
FLOATVAR             : 78 93
FOR                  : 23 24
GREATER_EQUAL        : 90
GTHAN                : 70 86
HASH                 : 70
IF                   : 15 16
INCLUDE              : 70
INT                  : 11 12 23 71
INTVAR               : 23 23 23 77 92
LBIT                 : 64
LBRACE               : 10 11 12 15 16 17 22 23 24 25 26 27 44 45
LESS_EQUAL           : 88
LPARENTH             : 10 11 12 15 16 22 23 24 44 45
LSQUARE              : 
LTHAN                : 70 87
MAIN                 : 10 11 12
MINUS                : 82
MOD                  : 85
MUL                  : 83
NAMESPACE            : 9
NOT_EQUAL            : 91
PLUS                 : 81
PRIVATE              : 47
PROTECTED            : 48
PUBLIC               : 46
RBIT                 : 76
RBRACE               : 10 11 12 15 16 17 22 23 24 25 26 27 44 45
RETURN               : 28 29
RPARENTH             : 10 11 12 15 16 22 23 24 44 45
RSQUARE              : 
SEMICOLON            : 9 10 11 12 23 23 24 24 25 26 27 28 29 30 31 34 35 36 58 61 76
STD                  : 9
STRING               : 74
STRINGVAR            : 68 94
TRUE                 : 96
USING                : 9
VARNAME              : 13 14 19 19 20 21 23 23 23 25 26 27 30 31 34 35 36 44 45 58 66 70 76
VOID                 : 10 80
WHILE                : 22
error                : 

Nonterminals, with rules where they appear

access_modifier      : 37 41
assign_var           : 39 59
block                : 1 2
block_part           : 3 3 8 8
bool_value           : 95
calculation          : 31 35 58
cin_in               : 57
class                : 6
class_functions      : 25 26 43 43
class_variable       : 25 27 40 40
comparator           : 18 19 20 21 23
condition            : 15 16 22
cout_expression      : 62 63
cout_expression_string : 61 62
declare_assign_var   : 33
declare_var          : 32
else_block           : 15
for_statement        : 55
func_block           : 10 11 15 16 17 22 23 24 44 45
function             : 7 41 42
if_statement         : 53
include              : 1
main_func            : 3 4
math_operator        : 23 69
number               : 69 69
parameters           : 14 44
print_out            : 56
printable            : 64
program              : 0
return_statement     : 50 51
return_type          : 44 45
statement            : 49 50 60 60
type                 : 13 14 34 35 36 79
using_namespace_std  : 1 2
var_value            : 18 18 20 21 28 30 34 65
variable_def         : 5 37 38 52
while_statement      : 54

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . include using_namespace_std block
    (2) program -> . using_namespace_std block
    (70) include -> . HASH INCLUDE LTHAN VARNAME GTHAN
    (9) using_namespace_std -> . USING NAMESPACE STD SEMICOLON

    HASH            shift and go to state 4
    USING           shift and go to state 5

    program                        shift and go to state 1
    include                        shift and go to state 2
    using_namespace_std            shift and go to state 3

state 1

    (0) S' -> program .



state 2

    (1) program -> include . using_namespace_std block
    (9) using_namespace_std -> . USING NAMESPACE STD SEMICOLON

    USING           shift and go to state 5

    using_namespace_std            shift and go to state 6

state 3

    (2) program -> using_namespace_std . block
    (3) block -> . block_part block_part main_func
    (4) block -> . main_func
    (5) block_part -> . variable_def
    (6) block_part -> . class
    (7) block_part -> . function
    (8) block_part -> . block_part block_part
    (10) main_func -> . VOID MAIN LPARENTH RPARENTH LBRACE func_block RBRACE SEMICOLON
    (11) main_func -> . INT MAIN LPARENTH RPARENTH LBRACE func_block RBRACE SEMICOLON
    (12) main_func -> . INT MAIN LPARENTH RPARENTH LBRACE RBRACE SEMICOLON
    (32) variable_def -> . declare_var
    (33) variable_def -> . declare_assign_var
    (25) class -> . CLASS VARNAME LBRACE class_variable class_functions RBRACE SEMICOLON
    (26) class -> . CLASS VARNAME LBRACE class_functions RBRACE SEMICOLON
    (27) class -> . CLASS VARNAME LBRACE class_variable RBRACE SEMICOLON
    (44) function -> . return_type VARNAME LPARENTH parameters RPARENTH LBRACE func_block RBRACE
    (45) function -> . return_type VARNAME LPARENTH RPARENTH LBRACE func_block RBRACE
    (36) declare_var -> . type VARNAME SEMICOLON
    (34) declare_assign_var -> . type VARNAME EQUAL var_value SEMICOLON
    (35) declare_assign_var -> . type VARNAME EQUAL calculation SEMICOLON
    (79) return_type -> . type
    (80) return_type -> . VOID
    (71) type -> . INT
    (72) type -> . FLOAT
    (73) type -> . CHAR
    (74) type -> . STRING
    (75) type -> . BOOL

    VOID            shift and go to state 13
    INT             shift and go to state 14
    CLASS           shift and go to state 17
    FLOAT           shift and go to state 20
    CHAR            shift and go to state 21
    STRING          shift and go to state 22
    BOOL            shift and go to state 23

    block                          shift and go to state 7
    block_part                     shift and go to state 8
    main_func                      shift and go to state 9
    variable_def                   shift and go to state 10
    class                          shift and go to state 11
    function                       shift and go to state 12
    declare_var                    shift and go to state 15
    declare_assign_var             shift and go to state 16
    return_type                    shift and go to state 18
    type                           shift and go to state 19

state 4

    (70) include -> HASH . INCLUDE LTHAN VARNAME GTHAN

    INCLUDE         shift and go to state 24


state 5

    (9) using_namespace_std -> USING . NAMESPACE STD SEMICOLON

    NAMESPACE       shift and go to state 25


state 6

    (1) program -> include using_namespace_std . block
    (3) block -> . block_part block_part main_func
    (4) block -> . main_func
    (5) block_part -> . variable_def
    (6) block_part -> . class
    (7) block_part -> . function
    (8) block_part -> . block_part block_part
    (10) main_func -> . VOID MAIN LPARENTH RPARENTH LBRACE func_block RBRACE SEMICOLON
    (11) main_func -> . INT MAIN LPARENTH RPARENTH LBRACE func_block RBRACE SEMICOLON
    (12) main_func -> . INT MAIN LPARENTH RPARENTH LBRACE RBRACE SEMICOLON
    (32) variable_def -> . declare_var
    (33) variable_def -> . declare_assign_var
    (25) class -> . CLASS VARNAME LBRACE class_variable class_functions RBRACE SEMICOLON
    (26) class -> . CLASS VARNAME LBRACE class_functions RBRACE SEMICOLON
    (27) class -> . CLASS VARNAME LBRACE class_variable RBRACE SEMICOLON
    (44) function -> . return_type VARNAME LPARENTH parameters RPARENTH LBRACE func_block RBRACE
    (45) function -> . return_type VARNAME LPARENTH RPARENTH LBRACE func_block RBRACE
    (36) declare_var -> . type VARNAME SEMICOLON
    (34) declare_assign_var -> . type VARNAME EQUAL var_value SEMICOLON
    (35) declare_assign_var -> . type VARNAME EQUAL calculation SEMICOLON
    (79) return_type -> . type
    (80) return_type -> . VOID
    (71) type -> . INT
    (72) type -> . FLOAT
    (73) type -> . CHAR
    (74) type -> . STRING
    (75) type -> . BOOL

    VOID            shift and go to state 13
    INT             shift and go to state 14
    CLASS           shift and go to state 17
    FLOAT           shift and go to state 20
    CHAR            shift and go to state 21
    STRING          shift and go to state 22
    BOOL            shift and go to state 23

    block                          shift and go to state 26
    block_part                     shift and go to state 8
    main_func                      shift and go to state 9
    variable_def                   shift and go to state 10
    class                          shift and go to state 11
    function                       shift and go to state 12
    declare_var                    shift and go to state 15
    declare_assign_var             shift and go to state 16
    return_type                    shift and go to state 18
    type                           shift and go to state 19

state 7

    (2) program -> using_namespace_std block .

    $end            reduce using rule 2 (program -> using_namespace_std block .)


state 8

    (3) block -> block_part . block_part main_func
    (8) block_part -> block_part . block_part
    (5) block_part -> . variable_def
    (6) block_part -> . class
    (7) block_part -> . function
    (8) block_part -> . block_part block_part
    (32) variable_def -> . declare_var
    (33) variable_def -> . declare_assign_var
    (25) class -> . CLASS VARNAME LBRACE class_variable class_functions RBRACE SEMICOLON
    (26) class -> . CLASS VARNAME LBRACE class_functions RBRACE SEMICOLON
    (27) class -> . CLASS VARNAME LBRACE class_variable RBRACE SEMICOLON
    (44) function -> . return_type VARNAME LPARENTH parameters RPARENTH LBRACE func_block RBRACE
    (45) function -> . return_type VARNAME LPARENTH RPARENTH LBRACE func_block RBRACE
    (36) declare_var -> . type VARNAME SEMICOLON
    (34) declare_assign_var -> . type VARNAME EQUAL var_value SEMICOLON
    (35) declare_assign_var -> . type VARNAME EQUAL calculation SEMICOLON
    (79) return_type -> . type
    (80) return_type -> . VOID
    (71) type -> . INT
    (72) type -> . FLOAT
    (73) type -> . CHAR
    (74) type -> . STRING
    (75) type -> . BOOL

    CLASS           shift and go to state 17
    VOID            shift and go to state 28
    INT             shift and go to state 29
    FLOAT           shift and go to state 20
    CHAR            shift and go to state 21
    STRING          shift and go to state 22
    BOOL            shift and go to state 23

    block_part                     shift and go to state 27
    variable_def                   shift and go to state 10
    class                          shift and go to state 11
    function                       shift and go to state 12
    declare_var                    shift and go to state 15
    declare_assign_var             shift and go to state 16
    return_type                    shift and go to state 18
    type                           shift and go to state 19

state 9

    (4) block -> main_func .

    $end            reduce using rule 4 (block -> main_func .)


state 10

    (5) block_part -> variable_def .

    CLASS           reduce using rule 5 (block_part -> variable_def .)
    VOID            reduce using rule 5 (block_part -> variable_def .)
    INT             reduce using rule 5 (block_part -> variable_def .)
    FLOAT           reduce using rule 5 (block_part -> variable_def .)
    CHAR            reduce using rule 5 (block_part -> variable_def .)
    STRING          reduce using rule 5 (block_part -> variable_def .)
    BOOL            reduce using rule 5 (block_part -> variable_def .)


state 11

    (6) block_part -> class .

    CLASS           reduce using rule 6 (block_part -> class .)
    VOID            reduce using rule 6 (block_part -> class .)
    INT             reduce using rule 6 (block_part -> class .)
    FLOAT           reduce using rule 6 (block_part -> class .)
    CHAR            reduce using rule 6 (block_part -> class .)
    STRING          reduce using rule 6 (block_part -> class .)
    BOOL            reduce using rule 6 (block_part -> class .)


state 12

    (7) block_part -> function .

    CLASS           reduce using rule 7 (block_part -> function .)
    VOID            reduce using rule 7 (block_part -> function .)
    INT             reduce using rule 7 (block_part -> function .)
    FLOAT           reduce using rule 7 (block_part -> function .)
    CHAR            reduce using rule 7 (block_part -> function .)
    STRING          reduce using rule 7 (block_part -> function .)
    BOOL            reduce using rule 7 (block_part -> function .)


state 13

    (10) main_func -> VOID . MAIN LPARENTH RPARENTH LBRACE func_block RBRACE SEMICOLON
    (80) return_type -> VOID .

    MAIN            shift and go to state 30
    VARNAME         reduce using rule 80 (return_type -> VOID .)


state 14

    (11) main_func -> INT . MAIN LPARENTH RPARENTH LBRACE func_block RBRACE SEMICOLON
    (12) main_func -> INT . MAIN LPARENTH RPARENTH LBRACE RBRACE SEMICOLON
    (71) type -> INT .

    MAIN            shift and go to state 31
    VARNAME         reduce using rule 71 (type -> INT .)


state 15

    (32) variable_def -> declare_var .

    CLASS           reduce using rule 32 (variable_def -> declare_var .)
    VOID            reduce using rule 32 (variable_def -> declare_var .)
    INT             reduce using rule 32 (variable_def -> declare_var .)
    FLOAT           reduce using rule 32 (variable_def -> declare_var .)
    CHAR            reduce using rule 32 (variable_def -> declare_var .)
    STRING          reduce using rule 32 (variable_def -> declare_var .)
    BOOL            reduce using rule 32 (variable_def -> declare_var .)
    RBRACE          reduce using rule 32 (variable_def -> declare_var .)
    PUBLIC          reduce using rule 32 (variable_def -> declare_var .)
    PRIVATE         reduce using rule 32 (variable_def -> declare_var .)
    PROTECTED       reduce using rule 32 (variable_def -> declare_var .)
    VARNAME         reduce using rule 32 (variable_def -> declare_var .)
    RETURN          reduce using rule 32 (variable_def -> declare_var .)
    IF              reduce using rule 32 (variable_def -> declare_var .)
    WHILE           reduce using rule 32 (variable_def -> declare_var .)
    FOR             reduce using rule 32 (variable_def -> declare_var .)
    COUT            reduce using rule 32 (variable_def -> declare_var .)
    CIN             reduce using rule 32 (variable_def -> declare_var .)


state 16

    (33) variable_def -> declare_assign_var .

    CLASS           reduce using rule 33 (variable_def -> declare_assign_var .)
    VOID            reduce using rule 33 (variable_def -> declare_assign_var .)
    INT             reduce using rule 33 (variable_def -> declare_assign_var .)
    FLOAT           reduce using rule 33 (variable_def -> declare_assign_var .)
    CHAR            reduce using rule 33 (variable_def -> declare_assign_var .)
    STRING          reduce using rule 33 (variable_def -> declare_assign_var .)
    BOOL            reduce using rule 33 (variable_def -> declare_assign_var .)
    RBRACE          reduce using rule 33 (variable_def -> declare_assign_var .)
    PUBLIC          reduce using rule 33 (variable_def -> declare_assign_var .)
    PRIVATE         reduce using rule 33 (variable_def -> declare_assign_var .)
    PROTECTED       reduce using rule 33 (variable_def -> declare_assign_var .)
    VARNAME         reduce using rule 33 (variable_def -> declare_assign_var .)
    RETURN          reduce using rule 33 (variable_def -> declare_assign_var .)
    IF              reduce using rule 33 (variable_def -> declare_assign_var .)
    WHILE           reduce using rule 33 (variable_def -> declare_assign_var .)
    FOR             reduce using rule 33 (variable_def -> declare_assign_var .)
    COUT            reduce using rule 33 (variable_def -> declare_assign_var .)
    CIN             reduce using rule 33 (variable_def -> declare_assign_var .)


state 17

    (25) class -> CLASS . VARNAME LBRACE class_variable class_functions RBRACE SEMICOLON
    (26) class -> CLASS . VARNAME LBRACE class_functions RBRACE SEMICOLON
    (27) class -> CLASS . VARNAME LBRACE class_variable RBRACE SEMICOLON

    VARNAME         shift and go to state 32


state 18

    (44) function -> return_type . VARNAME LPARENTH parameters RPARENTH LBRACE func_block RBRACE
    (45) function -> return_type . VARNAME LPARENTH RPARENTH LBRACE func_block RBRACE

    VARNAME         shift and go to state 33


state 19

    (36) declare_var -> type . VARNAME SEMICOLON
    (34) declare_assign_var -> type . VARNAME EQUAL var_value SEMICOLON
    (35) declare_assign_var -> type . VARNAME EQUAL calculation SEMICOLON
    (79) return_type -> type .

  ! shift/reduce conflict for VARNAME resolved as shift
    VARNAME         shift and go to state 34

  ! VARNAME         [ reduce using rule 79 (return_type -> type .) ]


state 20

    (72) type -> FLOAT .

    VARNAME         reduce using rule 72 (type -> FLOAT .)


state 21

    (73) type -> CHAR .

    VARNAME         reduce using rule 73 (type -> CHAR .)


state 22

    (74) type -> STRING .

    VARNAME         reduce using rule 74 (type -> STRING .)


state 23

    (75) type -> BOOL .

    VARNAME         reduce using rule 75 (type -> BOOL .)


state 24

    (70) include -> HASH INCLUDE . LTHAN VARNAME GTHAN

    LTHAN           shift and go to state 35


state 25

    (9) using_namespace_std -> USING NAMESPACE . STD SEMICOLON

    STD             shift and go to state 36


state 26

    (1) program -> include using_namespace_std block .

    $end            reduce using rule 1 (program -> include using_namespace_std block .)


state 27

    (3) block -> block_part block_part . main_func
    (8) block_part -> block_part block_part .
    (8) block_part -> block_part . block_part
    (10) main_func -> . VOID MAIN LPARENTH RPARENTH LBRACE func_block RBRACE SEMICOLON
    (11) main_func -> . INT MAIN LPARENTH RPARENTH LBRACE func_block RBRACE SEMICOLON
    (12) main_func -> . INT MAIN LPARENTH RPARENTH LBRACE RBRACE SEMICOLON
    (5) block_part -> . variable_def
    (6) block_part -> . class
    (7) block_part -> . function
    (8) block_part -> . block_part block_part
    (32) variable_def -> . declare_var
    (33) variable_def -> . declare_assign_var
    (25) class -> . CLASS VARNAME LBRACE class_variable class_functions RBRACE SEMICOLON
    (26) class -> . CLASS VARNAME LBRACE class_functions RBRACE SEMICOLON
    (27) class -> . CLASS VARNAME LBRACE class_variable RBRACE SEMICOLON
    (44) function -> . return_type VARNAME LPARENTH parameters RPARENTH LBRACE func_block RBRACE
    (45) function -> . return_type VARNAME LPARENTH RPARENTH LBRACE func_block RBRACE
    (36) declare_var -> . type VARNAME SEMICOLON
    (34) declare_assign_var -> . type VARNAME EQUAL var_value SEMICOLON
    (35) declare_assign_var -> . type VARNAME EQUAL calculation SEMICOLON
    (79) return_type -> . type
    (80) return_type -> . VOID
    (71) type -> . INT
    (72) type -> . FLOAT
    (73) type -> . CHAR
    (74) type -> . STRING
    (75) type -> . BOOL

  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
    VOID            shift and go to state 13
    INT             shift and go to state 14
    CLASS           shift and go to state 17
    FLOAT           shift and go to state 20
    CHAR            shift and go to state 21
    STRING          shift and go to state 22
    BOOL            shift and go to state 23

  ! CLASS           [ reduce using rule 8 (block_part -> block_part block_part .) ]
  ! VOID            [ reduce using rule 8 (block_part -> block_part block_part .) ]
  ! INT             [ reduce using rule 8 (block_part -> block_part block_part .) ]
  ! FLOAT           [ reduce using rule 8 (block_part -> block_part block_part .) ]
  ! CHAR            [ reduce using rule 8 (block_part -> block_part block_part .) ]
  ! STRING          [ reduce using rule 8 (block_part -> block_part block_part .) ]
  ! BOOL            [ reduce using rule 8 (block_part -> block_part block_part .) ]

    block_part                     shift and go to state 37
    main_func                      shift and go to state 38
    variable_def                   shift and go to state 10
    class                          shift and go to state 11
    function                       shift and go to state 12
    declare_var                    shift and go to state 15
    declare_assign_var             shift and go to state 16
    return_type                    shift and go to state 18
    type                           shift and go to state 19

state 28

    (80) return_type -> VOID .

    VARNAME         reduce using rule 80 (return_type -> VOID .)


state 29

    (71) type -> INT .

    VARNAME         reduce using rule 71 (type -> INT .)


state 30

    (10) main_func -> VOID MAIN . LPARENTH RPARENTH LBRACE func_block RBRACE SEMICOLON

    LPARENTH        shift and go to state 39


state 31

    (11) main_func -> INT MAIN . LPARENTH RPARENTH LBRACE func_block RBRACE SEMICOLON
    (12) main_func -> INT MAIN . LPARENTH RPARENTH LBRACE RBRACE SEMICOLON

    LPARENTH        shift and go to state 40


state 32

    (25) class -> CLASS VARNAME . LBRACE class_variable class_functions RBRACE SEMICOLON
    (26) class -> CLASS VARNAME . LBRACE class_functions RBRACE SEMICOLON
    (27) class -> CLASS VARNAME . LBRACE class_variable RBRACE SEMICOLON

    LBRACE          shift and go to state 41


state 33

    (44) function -> return_type VARNAME . LPARENTH parameters RPARENTH LBRACE func_block RBRACE
    (45) function -> return_type VARNAME . LPARENTH RPARENTH LBRACE func_block RBRACE

    LPARENTH        shift and go to state 42


state 34

    (36) declare_var -> type VARNAME . SEMICOLON
    (34) declare_assign_var -> type VARNAME . EQUAL var_value SEMICOLON
    (35) declare_assign_var -> type VARNAME . EQUAL calculation SEMICOLON

    SEMICOLON       shift and go to state 43
    EQUAL           shift and go to state 44


state 35

    (70) include -> HASH INCLUDE LTHAN . VARNAME GTHAN

    VARNAME         shift and go to state 45


state 36

    (9) using_namespace_std -> USING NAMESPACE STD . SEMICOLON

    SEMICOLON       shift and go to state 46


state 37

    (8) block_part -> block_part block_part .
    (8) block_part -> block_part . block_part
    (5) block_part -> . variable_def
    (6) block_part -> . class
    (7) block_part -> . function
    (8) block_part -> . block_part block_part
    (32) variable_def -> . declare_var
    (33) variable_def -> . declare_assign_var
    (25) class -> . CLASS VARNAME LBRACE class_variable class_functions RBRACE SEMICOLON
    (26) class -> . CLASS VARNAME LBRACE class_functions RBRACE SEMICOLON
    (27) class -> . CLASS VARNAME LBRACE class_variable RBRACE SEMICOLON
    (44) function -> . return_type VARNAME LPARENTH parameters RPARENTH LBRACE func_block RBRACE
    (45) function -> . return_type VARNAME LPARENTH RPARENTH LBRACE func_block RBRACE
    (36) declare_var -> . type VARNAME SEMICOLON
    (34) declare_assign_var -> . type VARNAME EQUAL var_value SEMICOLON
    (35) declare_assign_var -> . type VARNAME EQUAL calculation SEMICOLON
    (79) return_type -> . type
    (80) return_type -> . VOID
    (71) type -> . INT
    (72) type -> . FLOAT
    (73) type -> . CHAR
    (74) type -> . STRING
    (75) type -> . BOOL

  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
    CLASS           shift and go to state 17
    VOID            shift and go to state 28
    INT             shift and go to state 29
    FLOAT           shift and go to state 20
    CHAR            shift and go to state 21
    STRING          shift and go to state 22
    BOOL            shift and go to state 23

  ! VOID            [ reduce using rule 8 (block_part -> block_part block_part .) ]
  ! INT             [ reduce using rule 8 (block_part -> block_part block_part .) ]
  ! CLASS           [ reduce using rule 8 (block_part -> block_part block_part .) ]
  ! FLOAT           [ reduce using rule 8 (block_part -> block_part block_part .) ]
  ! CHAR            [ reduce using rule 8 (block_part -> block_part block_part .) ]
  ! STRING          [ reduce using rule 8 (block_part -> block_part block_part .) ]
  ! BOOL            [ reduce using rule 8 (block_part -> block_part block_part .) ]

    block_part                     shift and go to state 37
    variable_def                   shift and go to state 10
    class                          shift and go to state 11
    function                       shift and go to state 12
    declare_var                    shift and go to state 15
    declare_assign_var             shift and go to state 16
    return_type                    shift and go to state 18
    type                           shift and go to state 19

state 38

    (3) block -> block_part block_part main_func .

    $end            reduce using rule 3 (block -> block_part block_part main_func .)


state 39

    (10) main_func -> VOID MAIN LPARENTH . RPARENTH LBRACE func_block RBRACE SEMICOLON

    RPARENTH        shift and go to state 47


state 40

    (11) main_func -> INT MAIN LPARENTH . RPARENTH LBRACE func_block RBRACE SEMICOLON
    (12) main_func -> INT MAIN LPARENTH . RPARENTH LBRACE RBRACE SEMICOLON

    RPARENTH        shift and go to state 48


state 41

    (25) class -> CLASS VARNAME LBRACE . class_variable class_functions RBRACE SEMICOLON
    (26) class -> CLASS VARNAME LBRACE . class_functions RBRACE SEMICOLON
    (27) class -> CLASS VARNAME LBRACE . class_variable RBRACE SEMICOLON
    (37) class_variable -> . access_modifier COLON variable_def
    (38) class_variable -> . variable_def
    (39) class_variable -> . assign_var
    (40) class_variable -> . class_variable class_variable
    (41) class_functions -> . access_modifier COLON function
    (42) class_functions -> . function
    (43) class_functions -> . class_functions class_functions
    (46) access_modifier -> . PUBLIC
    (47) access_modifier -> . PRIVATE
    (48) access_modifier -> . PROTECTED
    (32) variable_def -> . declare_var
    (33) variable_def -> . declare_assign_var
    (30) assign_var -> . VARNAME EQUAL var_value SEMICOLON
    (31) assign_var -> . VARNAME EQUAL calculation SEMICOLON
    (44) function -> . return_type VARNAME LPARENTH parameters RPARENTH LBRACE func_block RBRACE
    (45) function -> . return_type VARNAME LPARENTH RPARENTH LBRACE func_block RBRACE
    (36) declare_var -> . type VARNAME SEMICOLON
    (34) declare_assign_var -> . type VARNAME EQUAL var_value SEMICOLON
    (35) declare_assign_var -> . type VARNAME EQUAL calculation SEMICOLON
    (79) return_type -> . type
    (80) return_type -> . VOID
    (71) type -> . INT
    (72) type -> . FLOAT
    (73) type -> . CHAR
    (74) type -> . STRING
    (75) type -> . BOOL

    PUBLIC          shift and go to state 56
    PRIVATE         shift and go to state 57
    PROTECTED       shift and go to state 58
    VARNAME         shift and go to state 49
    VOID            shift and go to state 28
    INT             shift and go to state 29
    FLOAT           shift and go to state 20
    CHAR            shift and go to state 21
    STRING          shift and go to state 22
    BOOL            shift and go to state 23

    class_variable                 shift and go to state 50
    class_functions                shift and go to state 51
    access_modifier                shift and go to state 52
    variable_def                   shift and go to state 53
    assign_var                     shift and go to state 54
    function                       shift and go to state 55
    declare_var                    shift and go to state 15
    declare_assign_var             shift and go to state 16
    return_type                    shift and go to state 18
    type                           shift and go to state 19

state 42

    (44) function -> return_type VARNAME LPARENTH . parameters RPARENTH LBRACE func_block RBRACE
    (45) function -> return_type VARNAME LPARENTH . RPARENTH LBRACE func_block RBRACE
    (13) parameters -> . type VARNAME
    (14) parameters -> . type VARNAME COMMA parameters
    (71) type -> . INT
    (72) type -> . FLOAT
    (73) type -> . CHAR
    (74) type -> . STRING
    (75) type -> . BOOL

    RPARENTH        shift and go to state 60
    INT             shift and go to state 29
    FLOAT           shift and go to state 20
    CHAR            shift and go to state 21
    STRING          shift and go to state 22
    BOOL            shift and go to state 23

    parameters                     shift and go to state 59
    type                           shift and go to state 61

state 43

    (36) declare_var -> type VARNAME SEMICOLON .

    CLASS           reduce using rule 36 (declare_var -> type VARNAME SEMICOLON .)
    VOID            reduce using rule 36 (declare_var -> type VARNAME SEMICOLON .)
    INT             reduce using rule 36 (declare_var -> type VARNAME SEMICOLON .)
    FLOAT           reduce using rule 36 (declare_var -> type VARNAME SEMICOLON .)
    CHAR            reduce using rule 36 (declare_var -> type VARNAME SEMICOLON .)
    STRING          reduce using rule 36 (declare_var -> type VARNAME SEMICOLON .)
    BOOL            reduce using rule 36 (declare_var -> type VARNAME SEMICOLON .)
    RBRACE          reduce using rule 36 (declare_var -> type VARNAME SEMICOLON .)
    PUBLIC          reduce using rule 36 (declare_var -> type VARNAME SEMICOLON .)
    PRIVATE         reduce using rule 36 (declare_var -> type VARNAME SEMICOLON .)
    PROTECTED       reduce using rule 36 (declare_var -> type VARNAME SEMICOLON .)
    VARNAME         reduce using rule 36 (declare_var -> type VARNAME SEMICOLON .)
    RETURN          reduce using rule 36 (declare_var -> type VARNAME SEMICOLON .)
    IF              reduce using rule 36 (declare_var -> type VARNAME SEMICOLON .)
    WHILE           reduce using rule 36 (declare_var -> type VARNAME SEMICOLON .)
    FOR             reduce using rule 36 (declare_var -> type VARNAME SEMICOLON .)
    COUT            reduce using rule 36 (declare_var -> type VARNAME SEMICOLON .)
    CIN             reduce using rule 36 (declare_var -> type VARNAME SEMICOLON .)


state 44

    (34) declare_assign_var -> type VARNAME EQUAL . var_value SEMICOLON
    (35) declare_assign_var -> type VARNAME EQUAL . calculation SEMICOLON
    (92) var_value -> . INTVAR
    (93) var_value -> . FLOATVAR
    (94) var_value -> . STRINGVAR
    (95) var_value -> . bool_value
    (69) calculation -> . number math_operator number
    (96) bool_value -> . TRUE
    (97) bool_value -> . FALSE
    (77) number -> . INTVAR
    (78) number -> . FLOATVAR

    INTVAR          shift and go to state 64
    FLOATVAR        shift and go to state 65
    STRINGVAR       shift and go to state 66
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70

    var_value                      shift and go to state 62
    calculation                    shift and go to state 63
    bool_value                     shift and go to state 67
    number                         shift and go to state 68

state 45

    (70) include -> HASH INCLUDE LTHAN VARNAME . GTHAN

    GTHAN           shift and go to state 71


state 46

    (9) using_namespace_std -> USING NAMESPACE STD SEMICOLON .

    VOID            reduce using rule 9 (using_namespace_std -> USING NAMESPACE STD SEMICOLON .)
    INT             reduce using rule 9 (using_namespace_std -> USING NAMESPACE STD SEMICOLON .)
    CLASS           reduce using rule 9 (using_namespace_std -> USING NAMESPACE STD SEMICOLON .)
    FLOAT           reduce using rule 9 (using_namespace_std -> USING NAMESPACE STD SEMICOLON .)
    CHAR            reduce using rule 9 (using_namespace_std -> USING NAMESPACE STD SEMICOLON .)
    STRING          reduce using rule 9 (using_namespace_std -> USING NAMESPACE STD SEMICOLON .)
    BOOL            reduce using rule 9 (using_namespace_std -> USING NAMESPACE STD SEMICOLON .)


state 47

    (10) main_func -> VOID MAIN LPARENTH RPARENTH . LBRACE func_block RBRACE SEMICOLON

    LBRACE          shift and go to state 72


state 48

    (11) main_func -> INT MAIN LPARENTH RPARENTH . LBRACE func_block RBRACE SEMICOLON
    (12) main_func -> INT MAIN LPARENTH RPARENTH . LBRACE RBRACE SEMICOLON

    LBRACE          shift and go to state 73


state 49

    (30) assign_var -> VARNAME . EQUAL var_value SEMICOLON
    (31) assign_var -> VARNAME . EQUAL calculation SEMICOLON

    EQUAL           shift and go to state 74


state 50

    (25) class -> CLASS VARNAME LBRACE class_variable . class_functions RBRACE SEMICOLON
    (27) class -> CLASS VARNAME LBRACE class_variable . RBRACE SEMICOLON
    (40) class_variable -> class_variable . class_variable
    (41) class_functions -> . access_modifier COLON function
    (42) class_functions -> . function
    (43) class_functions -> . class_functions class_functions
    (37) class_variable -> . access_modifier COLON variable_def
    (38) class_variable -> . variable_def
    (39) class_variable -> . assign_var
    (40) class_variable -> . class_variable class_variable
    (46) access_modifier -> . PUBLIC
    (47) access_modifier -> . PRIVATE
    (48) access_modifier -> . PROTECTED
    (44) function -> . return_type VARNAME LPARENTH parameters RPARENTH LBRACE func_block RBRACE
    (45) function -> . return_type VARNAME LPARENTH RPARENTH LBRACE func_block RBRACE
    (32) variable_def -> . declare_var
    (33) variable_def -> . declare_assign_var
    (30) assign_var -> . VARNAME EQUAL var_value SEMICOLON
    (31) assign_var -> . VARNAME EQUAL calculation SEMICOLON
    (79) return_type -> . type
    (80) return_type -> . VOID
    (36) declare_var -> . type VARNAME SEMICOLON
    (34) declare_assign_var -> . type VARNAME EQUAL var_value SEMICOLON
    (35) declare_assign_var -> . type VARNAME EQUAL calculation SEMICOLON
    (71) type -> . INT
    (72) type -> . FLOAT
    (73) type -> . CHAR
    (74) type -> . STRING
    (75) type -> . BOOL

    RBRACE          shift and go to state 77
    PUBLIC          shift and go to state 56
    PRIVATE         shift and go to state 57
    PROTECTED       shift and go to state 58
    VARNAME         shift and go to state 49
    VOID            shift and go to state 28
    INT             shift and go to state 29
    FLOAT           shift and go to state 20
    CHAR            shift and go to state 21
    STRING          shift and go to state 22
    BOOL            shift and go to state 23

    class_variable                 shift and go to state 75
    class_functions                shift and go to state 76
    access_modifier                shift and go to state 78
    function                       shift and go to state 55
    variable_def                   shift and go to state 53
    assign_var                     shift and go to state 54
    return_type                    shift and go to state 18
    declare_var                    shift and go to state 15
    declare_assign_var             shift and go to state 16
    type                           shift and go to state 79

state 51

    (26) class -> CLASS VARNAME LBRACE class_functions . RBRACE SEMICOLON
    (43) class_functions -> class_functions . class_functions
    (41) class_functions -> . access_modifier COLON function
    (42) class_functions -> . function
    (43) class_functions -> . class_functions class_functions
    (46) access_modifier -> . PUBLIC
    (47) access_modifier -> . PRIVATE
    (48) access_modifier -> . PROTECTED
    (44) function -> . return_type VARNAME LPARENTH parameters RPARENTH LBRACE func_block RBRACE
    (45) function -> . return_type VARNAME LPARENTH RPARENTH LBRACE func_block RBRACE
    (79) return_type -> . type
    (80) return_type -> . VOID
    (71) type -> . INT
    (72) type -> . FLOAT
    (73) type -> . CHAR
    (74) type -> . STRING
    (75) type -> . BOOL

    RBRACE          shift and go to state 81
    PUBLIC          shift and go to state 56
    PRIVATE         shift and go to state 57
    PROTECTED       shift and go to state 58
    VOID            shift and go to state 28
    INT             shift and go to state 29
    FLOAT           shift and go to state 20
    CHAR            shift and go to state 21
    STRING          shift and go to state 22
    BOOL            shift and go to state 23

    class_functions                shift and go to state 80
    access_modifier                shift and go to state 82
    function                       shift and go to state 55
    return_type                    shift and go to state 18
    type                           shift and go to state 83

state 52

    (37) class_variable -> access_modifier . COLON variable_def
    (41) class_functions -> access_modifier . COLON function

    COLON           shift and go to state 84


state 53

    (38) class_variable -> variable_def .

    RBRACE          reduce using rule 38 (class_variable -> variable_def .)
    PUBLIC          reduce using rule 38 (class_variable -> variable_def .)
    PRIVATE         reduce using rule 38 (class_variable -> variable_def .)
    PROTECTED       reduce using rule 38 (class_variable -> variable_def .)
    VARNAME         reduce using rule 38 (class_variable -> variable_def .)
    VOID            reduce using rule 38 (class_variable -> variable_def .)
    INT             reduce using rule 38 (class_variable -> variable_def .)
    FLOAT           reduce using rule 38 (class_variable -> variable_def .)
    CHAR            reduce using rule 38 (class_variable -> variable_def .)
    STRING          reduce using rule 38 (class_variable -> variable_def .)
    BOOL            reduce using rule 38 (class_variable -> variable_def .)


state 54

    (39) class_variable -> assign_var .

    RBRACE          reduce using rule 39 (class_variable -> assign_var .)
    PUBLIC          reduce using rule 39 (class_variable -> assign_var .)
    PRIVATE         reduce using rule 39 (class_variable -> assign_var .)
    PROTECTED       reduce using rule 39 (class_variable -> assign_var .)
    VARNAME         reduce using rule 39 (class_variable -> assign_var .)
    VOID            reduce using rule 39 (class_variable -> assign_var .)
    INT             reduce using rule 39 (class_variable -> assign_var .)
    FLOAT           reduce using rule 39 (class_variable -> assign_var .)
    CHAR            reduce using rule 39 (class_variable -> assign_var .)
    STRING          reduce using rule 39 (class_variable -> assign_var .)
    BOOL            reduce using rule 39 (class_variable -> assign_var .)


state 55

    (42) class_functions -> function .

    RBRACE          reduce using rule 42 (class_functions -> function .)
    PUBLIC          reduce using rule 42 (class_functions -> function .)
    PRIVATE         reduce using rule 42 (class_functions -> function .)
    PROTECTED       reduce using rule 42 (class_functions -> function .)
    VOID            reduce using rule 42 (class_functions -> function .)
    INT             reduce using rule 42 (class_functions -> function .)
    FLOAT           reduce using rule 42 (class_functions -> function .)
    CHAR            reduce using rule 42 (class_functions -> function .)
    STRING          reduce using rule 42 (class_functions -> function .)
    BOOL            reduce using rule 42 (class_functions -> function .)


state 56

    (46) access_modifier -> PUBLIC .

    COLON           reduce using rule 46 (access_modifier -> PUBLIC .)


state 57

    (47) access_modifier -> PRIVATE .

    COLON           reduce using rule 47 (access_modifier -> PRIVATE .)


state 58

    (48) access_modifier -> PROTECTED .

    COLON           reduce using rule 48 (access_modifier -> PROTECTED .)


state 59

    (44) function -> return_type VARNAME LPARENTH parameters . RPARENTH LBRACE func_block RBRACE

    RPARENTH        shift and go to state 85


state 60

    (45) function -> return_type VARNAME LPARENTH RPARENTH . LBRACE func_block RBRACE

    LBRACE          shift and go to state 86


state 61

    (13) parameters -> type . VARNAME
    (14) parameters -> type . VARNAME COMMA parameters

    VARNAME         shift and go to state 87


state 62

    (34) declare_assign_var -> type VARNAME EQUAL var_value . SEMICOLON

    SEMICOLON       shift and go to state 88


state 63

    (35) declare_assign_var -> type VARNAME EQUAL calculation . SEMICOLON

    SEMICOLON       shift and go to state 89


state 64

    (92) var_value -> INTVAR .
    (77) number -> INTVAR .

    SEMICOLON       reduce using rule 92 (var_value -> INTVAR .)
    PLUS            reduce using rule 77 (number -> INTVAR .)
    MINUS           reduce using rule 77 (number -> INTVAR .)
    MUL             reduce using rule 77 (number -> INTVAR .)
    DIV             reduce using rule 77 (number -> INTVAR .)
    MOD             reduce using rule 77 (number -> INTVAR .)


state 65

    (93) var_value -> FLOATVAR .
    (78) number -> FLOATVAR .

    SEMICOLON       reduce using rule 93 (var_value -> FLOATVAR .)
    PLUS            reduce using rule 78 (number -> FLOATVAR .)
    MINUS           reduce using rule 78 (number -> FLOATVAR .)
    MUL             reduce using rule 78 (number -> FLOATVAR .)
    DIV             reduce using rule 78 (number -> FLOATVAR .)
    MOD             reduce using rule 78 (number -> FLOATVAR .)


state 66

    (94) var_value -> STRINGVAR .

    SEMICOLON       reduce using rule 94 (var_value -> STRINGVAR .)
    GTHAN           reduce using rule 94 (var_value -> STRINGVAR .)
    LTHAN           reduce using rule 94 (var_value -> STRINGVAR .)
    LESS_EQUAL      reduce using rule 94 (var_value -> STRINGVAR .)
    DEQUAL          reduce using rule 94 (var_value -> STRINGVAR .)
    GREATER_EQUAL   reduce using rule 94 (var_value -> STRINGVAR .)
    NOT_EQUAL       reduce using rule 94 (var_value -> STRINGVAR .)
    RPARENTH        reduce using rule 94 (var_value -> STRINGVAR .)


state 67

    (95) var_value -> bool_value .

    SEMICOLON       reduce using rule 95 (var_value -> bool_value .)
    GTHAN           reduce using rule 95 (var_value -> bool_value .)
    LTHAN           reduce using rule 95 (var_value -> bool_value .)
    LESS_EQUAL      reduce using rule 95 (var_value -> bool_value .)
    DEQUAL          reduce using rule 95 (var_value -> bool_value .)
    GREATER_EQUAL   reduce using rule 95 (var_value -> bool_value .)
    NOT_EQUAL       reduce using rule 95 (var_value -> bool_value .)
    LBIT            reduce using rule 95 (var_value -> bool_value .)
    RPARENTH        reduce using rule 95 (var_value -> bool_value .)


state 68

    (69) calculation -> number . math_operator number
    (81) math_operator -> . PLUS
    (82) math_operator -> . MINUS
    (83) math_operator -> . MUL
    (84) math_operator -> . DIV
    (85) math_operator -> . MOD

    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    MUL             shift and go to state 93
    DIV             shift and go to state 94
    MOD             shift and go to state 95

    math_operator                  shift and go to state 90

state 69

    (96) bool_value -> TRUE .

    SEMICOLON       reduce using rule 96 (bool_value -> TRUE .)
    GTHAN           reduce using rule 96 (bool_value -> TRUE .)
    LTHAN           reduce using rule 96 (bool_value -> TRUE .)
    LESS_EQUAL      reduce using rule 96 (bool_value -> TRUE .)
    DEQUAL          reduce using rule 96 (bool_value -> TRUE .)
    GREATER_EQUAL   reduce using rule 96 (bool_value -> TRUE .)
    NOT_EQUAL       reduce using rule 96 (bool_value -> TRUE .)
    LBIT            reduce using rule 96 (bool_value -> TRUE .)
    RPARENTH        reduce using rule 96 (bool_value -> TRUE .)


state 70

    (97) bool_value -> FALSE .

    SEMICOLON       reduce using rule 97 (bool_value -> FALSE .)
    GTHAN           reduce using rule 97 (bool_value -> FALSE .)
    LTHAN           reduce using rule 97 (bool_value -> FALSE .)
    LESS_EQUAL      reduce using rule 97 (bool_value -> FALSE .)
    DEQUAL          reduce using rule 97 (bool_value -> FALSE .)
    GREATER_EQUAL   reduce using rule 97 (bool_value -> FALSE .)
    NOT_EQUAL       reduce using rule 97 (bool_value -> FALSE .)
    LBIT            reduce using rule 97 (bool_value -> FALSE .)
    RPARENTH        reduce using rule 97 (bool_value -> FALSE .)


state 71

    (70) include -> HASH INCLUDE LTHAN VARNAME GTHAN .

    USING           reduce using rule 70 (include -> HASH INCLUDE LTHAN VARNAME GTHAN .)


state 72

    (10) main_func -> VOID MAIN LPARENTH RPARENTH LBRACE . func_block RBRACE SEMICOLON
    (49) func_block -> . statement
    (50) func_block -> . statement return_statement
    (51) func_block -> . return_statement
    (52) statement -> . variable_def
    (53) statement -> . if_statement
    (54) statement -> . while_statement
    (55) statement -> . for_statement
    (56) statement -> . print_out
    (57) statement -> . cin_in
    (58) statement -> . VARNAME EQUAL calculation SEMICOLON
    (59) statement -> . assign_var
    (60) statement -> . statement statement
    (28) return_statement -> . RETURN var_value SEMICOLON
    (29) return_statement -> . RETURN SEMICOLON
    (32) variable_def -> . declare_var
    (33) variable_def -> . declare_assign_var
    (15) if_statement -> . IF LPARENTH condition RPARENTH LBRACE func_block RBRACE else_block
    (16) if_statement -> . IF LPARENTH condition RPARENTH LBRACE func_block RBRACE
    (22) while_statement -> . WHILE LPARENTH condition RPARENTH LBRACE func_block RBRACE
    (23) for_statement -> . FOR LPARENTH INT VARNAME EQUAL INTVAR SEMICOLON VARNAME comparator INTVAR SEMICOLON VARNAME math_operator EQUAL INTVAR RPARENTH LBRACE func_block RBRACE
    (24) for_statement -> . FOR LPARENTH SEMICOLON SEMICOLON RPARENTH LBRACE func_block RBRACE
    (61) print_out -> . COUT cout_expression_string SEMICOLON
    (76) cin_in -> . CIN RBIT VARNAME SEMICOLON
    (30) assign_var -> . VARNAME EQUAL var_value SEMICOLON
    (31) assign_var -> . VARNAME EQUAL calculation SEMICOLON
    (36) declare_var -> . type VARNAME SEMICOLON
    (34) declare_assign_var -> . type VARNAME EQUAL var_value SEMICOLON
    (35) declare_assign_var -> . type VARNAME EQUAL calculation SEMICOLON
    (71) type -> . INT
    (72) type -> . FLOAT
    (73) type -> . CHAR
    (74) type -> . STRING
    (75) type -> . BOOL

    VARNAME         shift and go to state 105
    RETURN          shift and go to state 107
    IF              shift and go to state 108
    WHILE           shift and go to state 109
    FOR             shift and go to state 110
    COUT            shift and go to state 111
    CIN             shift and go to state 112
    INT             shift and go to state 29
    FLOAT           shift and go to state 20
    CHAR            shift and go to state 21
    STRING          shift and go to state 22
    BOOL            shift and go to state 23

    func_block                     shift and go to state 96
    statement                      shift and go to state 97
    return_statement               shift and go to state 98
    variable_def                   shift and go to state 99
    if_statement                   shift and go to state 100
    while_statement                shift and go to state 101
    for_statement                  shift and go to state 102
    print_out                      shift and go to state 103
    cin_in                         shift and go to state 104
    assign_var                     shift and go to state 106
    declare_var                    shift and go to state 15
    declare_assign_var             shift and go to state 16
    type                           shift and go to state 113

state 73

    (11) main_func -> INT MAIN LPARENTH RPARENTH LBRACE . func_block RBRACE SEMICOLON
    (12) main_func -> INT MAIN LPARENTH RPARENTH LBRACE . RBRACE SEMICOLON
    (49) func_block -> . statement
    (50) func_block -> . statement return_statement
    (51) func_block -> . return_statement
    (52) statement -> . variable_def
    (53) statement -> . if_statement
    (54) statement -> . while_statement
    (55) statement -> . for_statement
    (56) statement -> . print_out
    (57) statement -> . cin_in
    (58) statement -> . VARNAME EQUAL calculation SEMICOLON
    (59) statement -> . assign_var
    (60) statement -> . statement statement
    (28) return_statement -> . RETURN var_value SEMICOLON
    (29) return_statement -> . RETURN SEMICOLON
    (32) variable_def -> . declare_var
    (33) variable_def -> . declare_assign_var
    (15) if_statement -> . IF LPARENTH condition RPARENTH LBRACE func_block RBRACE else_block
    (16) if_statement -> . IF LPARENTH condition RPARENTH LBRACE func_block RBRACE
    (22) while_statement -> . WHILE LPARENTH condition RPARENTH LBRACE func_block RBRACE
    (23) for_statement -> . FOR LPARENTH INT VARNAME EQUAL INTVAR SEMICOLON VARNAME comparator INTVAR SEMICOLON VARNAME math_operator EQUAL INTVAR RPARENTH LBRACE func_block RBRACE
    (24) for_statement -> . FOR LPARENTH SEMICOLON SEMICOLON RPARENTH LBRACE func_block RBRACE
    (61) print_out -> . COUT cout_expression_string SEMICOLON
    (76) cin_in -> . CIN RBIT VARNAME SEMICOLON
    (30) assign_var -> . VARNAME EQUAL var_value SEMICOLON
    (31) assign_var -> . VARNAME EQUAL calculation SEMICOLON
    (36) declare_var -> . type VARNAME SEMICOLON
    (34) declare_assign_var -> . type VARNAME EQUAL var_value SEMICOLON
    (35) declare_assign_var -> . type VARNAME EQUAL calculation SEMICOLON
    (71) type -> . INT
    (72) type -> . FLOAT
    (73) type -> . CHAR
    (74) type -> . STRING
    (75) type -> . BOOL

    RBRACE          shift and go to state 115
    VARNAME         shift and go to state 105
    RETURN          shift and go to state 107
    IF              shift and go to state 108
    WHILE           shift and go to state 109
    FOR             shift and go to state 110
    COUT            shift and go to state 111
    CIN             shift and go to state 112
    INT             shift and go to state 29
    FLOAT           shift and go to state 20
    CHAR            shift and go to state 21
    STRING          shift and go to state 22
    BOOL            shift and go to state 23

    func_block                     shift and go to state 114
    statement                      shift and go to state 97
    return_statement               shift and go to state 98
    variable_def                   shift and go to state 99
    if_statement                   shift and go to state 100
    while_statement                shift and go to state 101
    for_statement                  shift and go to state 102
    print_out                      shift and go to state 103
    cin_in                         shift and go to state 104
    assign_var                     shift and go to state 106
    declare_var                    shift and go to state 15
    declare_assign_var             shift and go to state 16
    type                           shift and go to state 113

state 74

    (30) assign_var -> VARNAME EQUAL . var_value SEMICOLON
    (31) assign_var -> VARNAME EQUAL . calculation SEMICOLON
    (92) var_value -> . INTVAR
    (93) var_value -> . FLOATVAR
    (94) var_value -> . STRINGVAR
    (95) var_value -> . bool_value
    (69) calculation -> . number math_operator number
    (96) bool_value -> . TRUE
    (97) bool_value -> . FALSE
    (77) number -> . INTVAR
    (78) number -> . FLOATVAR

    INTVAR          shift and go to state 64
    FLOATVAR        shift and go to state 65
    STRINGVAR       shift and go to state 66
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70

    var_value                      shift and go to state 116
    calculation                    shift and go to state 117
    bool_value                     shift and go to state 67
    number                         shift and go to state 68

state 75

    (40) class_variable -> class_variable class_variable .
    (40) class_variable -> class_variable . class_variable
    (37) class_variable -> . access_modifier COLON variable_def
    (38) class_variable -> . variable_def
    (39) class_variable -> . assign_var
    (40) class_variable -> . class_variable class_variable
    (46) access_modifier -> . PUBLIC
    (47) access_modifier -> . PRIVATE
    (48) access_modifier -> . PROTECTED
    (32) variable_def -> . declare_var
    (33) variable_def -> . declare_assign_var
    (30) assign_var -> . VARNAME EQUAL var_value SEMICOLON
    (31) assign_var -> . VARNAME EQUAL calculation SEMICOLON
    (36) declare_var -> . type VARNAME SEMICOLON
    (34) declare_assign_var -> . type VARNAME EQUAL var_value SEMICOLON
    (35) declare_assign_var -> . type VARNAME EQUAL calculation SEMICOLON
    (71) type -> . INT
    (72) type -> . FLOAT
    (73) type -> . CHAR
    (74) type -> . STRING
    (75) type -> . BOOL

  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for VARNAME resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
    RBRACE          reduce using rule 40 (class_variable -> class_variable class_variable .)
    VOID            reduce using rule 40 (class_variable -> class_variable class_variable .)
    PUBLIC          shift and go to state 56
    PRIVATE         shift and go to state 57
    PROTECTED       shift and go to state 58
    VARNAME         shift and go to state 49
    INT             shift and go to state 29
    FLOAT           shift and go to state 20
    CHAR            shift and go to state 21
    STRING          shift and go to state 22
    BOOL            shift and go to state 23

  ! PUBLIC          [ reduce using rule 40 (class_variable -> class_variable class_variable .) ]
  ! PRIVATE         [ reduce using rule 40 (class_variable -> class_variable class_variable .) ]
  ! PROTECTED       [ reduce using rule 40 (class_variable -> class_variable class_variable .) ]
  ! VARNAME         [ reduce using rule 40 (class_variable -> class_variable class_variable .) ]
  ! INT             [ reduce using rule 40 (class_variable -> class_variable class_variable .) ]
  ! FLOAT           [ reduce using rule 40 (class_variable -> class_variable class_variable .) ]
  ! CHAR            [ reduce using rule 40 (class_variable -> class_variable class_variable .) ]
  ! STRING          [ reduce using rule 40 (class_variable -> class_variable class_variable .) ]
  ! BOOL            [ reduce using rule 40 (class_variable -> class_variable class_variable .) ]

    class_variable                 shift and go to state 75
    access_modifier                shift and go to state 118
    variable_def                   shift and go to state 53
    assign_var                     shift and go to state 54
    declare_var                    shift and go to state 15
    declare_assign_var             shift and go to state 16
    type                           shift and go to state 113

state 76

    (25) class -> CLASS VARNAME LBRACE class_variable class_functions . RBRACE SEMICOLON
    (43) class_functions -> class_functions . class_functions
    (41) class_functions -> . access_modifier COLON function
    (42) class_functions -> . function
    (43) class_functions -> . class_functions class_functions
    (46) access_modifier -> . PUBLIC
    (47) access_modifier -> . PRIVATE
    (48) access_modifier -> . PROTECTED
    (44) function -> . return_type VARNAME LPARENTH parameters RPARENTH LBRACE func_block RBRACE
    (45) function -> . return_type VARNAME LPARENTH RPARENTH LBRACE func_block RBRACE
    (79) return_type -> . type
    (80) return_type -> . VOID
    (71) type -> . INT
    (72) type -> . FLOAT
    (73) type -> . CHAR
    (74) type -> . STRING
    (75) type -> . BOOL

    RBRACE          shift and go to state 119
    PUBLIC          shift and go to state 56
    PRIVATE         shift and go to state 57
    PROTECTED       shift and go to state 58
    VOID            shift and go to state 28
    INT             shift and go to state 29
    FLOAT           shift and go to state 20
    CHAR            shift and go to state 21
    STRING          shift and go to state 22
    BOOL            shift and go to state 23

    class_functions                shift and go to state 80
    access_modifier                shift and go to state 82
    function                       shift and go to state 55
    return_type                    shift and go to state 18
    type                           shift and go to state 83

state 77

    (27) class -> CLASS VARNAME LBRACE class_variable RBRACE . SEMICOLON

    SEMICOLON       shift and go to state 120


state 78

    (41) class_functions -> access_modifier . COLON function
    (37) class_variable -> access_modifier . COLON variable_def

    COLON           shift and go to state 121


state 79

    (79) return_type -> type .
    (36) declare_var -> type . VARNAME SEMICOLON
    (34) declare_assign_var -> type . VARNAME EQUAL var_value SEMICOLON
    (35) declare_assign_var -> type . VARNAME EQUAL calculation SEMICOLON

  ! shift/reduce conflict for VARNAME resolved as shift
    VARNAME         shift and go to state 34

  ! VARNAME         [ reduce using rule 79 (return_type -> type .) ]


state 80

    (43) class_functions -> class_functions class_functions .
    (43) class_functions -> class_functions . class_functions
    (41) class_functions -> . access_modifier COLON function
    (42) class_functions -> . function
    (43) class_functions -> . class_functions class_functions
    (46) access_modifier -> . PUBLIC
    (47) access_modifier -> . PRIVATE
    (48) access_modifier -> . PROTECTED
    (44) function -> . return_type VARNAME LPARENTH parameters RPARENTH LBRACE func_block RBRACE
    (45) function -> . return_type VARNAME LPARENTH RPARENTH LBRACE func_block RBRACE
    (79) return_type -> . type
    (80) return_type -> . VOID
    (71) type -> . INT
    (72) type -> . FLOAT
    (73) type -> . CHAR
    (74) type -> . STRING
    (75) type -> . BOOL

  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
    RBRACE          reduce using rule 43 (class_functions -> class_functions class_functions .)
    PUBLIC          shift and go to state 56
    PRIVATE         shift and go to state 57
    PROTECTED       shift and go to state 58
    VOID            shift and go to state 28
    INT             shift and go to state 29
    FLOAT           shift and go to state 20
    CHAR            shift and go to state 21
    STRING          shift and go to state 22
    BOOL            shift and go to state 23

  ! PUBLIC          [ reduce using rule 43 (class_functions -> class_functions class_functions .) ]
  ! PRIVATE         [ reduce using rule 43 (class_functions -> class_functions class_functions .) ]
  ! PROTECTED       [ reduce using rule 43 (class_functions -> class_functions class_functions .) ]
  ! VOID            [ reduce using rule 43 (class_functions -> class_functions class_functions .) ]
  ! INT             [ reduce using rule 43 (class_functions -> class_functions class_functions .) ]
  ! FLOAT           [ reduce using rule 43 (class_functions -> class_functions class_functions .) ]
  ! CHAR            [ reduce using rule 43 (class_functions -> class_functions class_functions .) ]
  ! STRING          [ reduce using rule 43 (class_functions -> class_functions class_functions .) ]
  ! BOOL            [ reduce using rule 43 (class_functions -> class_functions class_functions .) ]

    class_functions                shift and go to state 80
    access_modifier                shift and go to state 82
    function                       shift and go to state 55
    return_type                    shift and go to state 18
    type                           shift and go to state 83

state 81

    (26) class -> CLASS VARNAME LBRACE class_functions RBRACE . SEMICOLON

    SEMICOLON       shift and go to state 122


state 82

    (41) class_functions -> access_modifier . COLON function

    COLON           shift and go to state 123


state 83

    (79) return_type -> type .

    VARNAME         reduce using rule 79 (return_type -> type .)


state 84

    (37) class_variable -> access_modifier COLON . variable_def
    (41) class_functions -> access_modifier COLON . function
    (32) variable_def -> . declare_var
    (33) variable_def -> . declare_assign_var
    (44) function -> . return_type VARNAME LPARENTH parameters RPARENTH LBRACE func_block RBRACE
    (45) function -> . return_type VARNAME LPARENTH RPARENTH LBRACE func_block RBRACE
    (36) declare_var -> . type VARNAME SEMICOLON
    (34) declare_assign_var -> . type VARNAME EQUAL var_value SEMICOLON
    (35) declare_assign_var -> . type VARNAME EQUAL calculation SEMICOLON
    (79) return_type -> . type
    (80) return_type -> . VOID
    (71) type -> . INT
    (72) type -> . FLOAT
    (73) type -> . CHAR
    (74) type -> . STRING
    (75) type -> . BOOL

    VOID            shift and go to state 28
    INT             shift and go to state 29
    FLOAT           shift and go to state 20
    CHAR            shift and go to state 21
    STRING          shift and go to state 22
    BOOL            shift and go to state 23

    variable_def                   shift and go to state 124
    function                       shift and go to state 125
    declare_var                    shift and go to state 15
    declare_assign_var             shift and go to state 16
    return_type                    shift and go to state 18
    type                           shift and go to state 19

state 85

    (44) function -> return_type VARNAME LPARENTH parameters RPARENTH . LBRACE func_block RBRACE

    LBRACE          shift and go to state 126


state 86

    (45) function -> return_type VARNAME LPARENTH RPARENTH LBRACE . func_block RBRACE
    (49) func_block -> . statement
    (50) func_block -> . statement return_statement
    (51) func_block -> . return_statement
    (52) statement -> . variable_def
    (53) statement -> . if_statement
    (54) statement -> . while_statement
    (55) statement -> . for_statement
    (56) statement -> . print_out
    (57) statement -> . cin_in
    (58) statement -> . VARNAME EQUAL calculation SEMICOLON
    (59) statement -> . assign_var
    (60) statement -> . statement statement
    (28) return_statement -> . RETURN var_value SEMICOLON
    (29) return_statement -> . RETURN SEMICOLON
    (32) variable_def -> . declare_var
    (33) variable_def -> . declare_assign_var
    (15) if_statement -> . IF LPARENTH condition RPARENTH LBRACE func_block RBRACE else_block
    (16) if_statement -> . IF LPARENTH condition RPARENTH LBRACE func_block RBRACE
    (22) while_statement -> . WHILE LPARENTH condition RPARENTH LBRACE func_block RBRACE
    (23) for_statement -> . FOR LPARENTH INT VARNAME EQUAL INTVAR SEMICOLON VARNAME comparator INTVAR SEMICOLON VARNAME math_operator EQUAL INTVAR RPARENTH LBRACE func_block RBRACE
    (24) for_statement -> . FOR LPARENTH SEMICOLON SEMICOLON RPARENTH LBRACE func_block RBRACE
    (61) print_out -> . COUT cout_expression_string SEMICOLON
    (76) cin_in -> . CIN RBIT VARNAME SEMICOLON
    (30) assign_var -> . VARNAME EQUAL var_value SEMICOLON
    (31) assign_var -> . VARNAME EQUAL calculation SEMICOLON
    (36) declare_var -> . type VARNAME SEMICOLON
    (34) declare_assign_var -> . type VARNAME EQUAL var_value SEMICOLON
    (35) declare_assign_var -> . type VARNAME EQUAL calculation SEMICOLON
    (71) type -> . INT
    (72) type -> . FLOAT
    (73) type -> . CHAR
    (74) type -> . STRING
    (75) type -> . BOOL

    VARNAME         shift and go to state 105
    RETURN          shift and go to state 107
    IF              shift and go to state 108
    WHILE           shift and go to state 109
    FOR             shift and go to state 110
    COUT            shift and go to state 111
    CIN             shift and go to state 112
    INT             shift and go to state 29
    FLOAT           shift and go to state 20
    CHAR            shift and go to state 21
    STRING          shift and go to state 22
    BOOL            shift and go to state 23

    func_block                     shift and go to state 127
    statement                      shift and go to state 97
    return_statement               shift and go to state 98
    variable_def                   shift and go to state 99
    if_statement                   shift and go to state 100
    while_statement                shift and go to state 101
    for_statement                  shift and go to state 102
    print_out                      shift and go to state 103
    cin_in                         shift and go to state 104
    assign_var                     shift and go to state 106
    declare_var                    shift and go to state 15
    declare_assign_var             shift and go to state 16
    type                           shift and go to state 113

state 87

    (13) parameters -> type VARNAME .
    (14) parameters -> type VARNAME . COMMA parameters

    RPARENTH        reduce using rule 13 (parameters -> type VARNAME .)
    COMMA           shift and go to state 128


state 88

    (34) declare_assign_var -> type VARNAME EQUAL var_value SEMICOLON .

    CLASS           reduce using rule 34 (declare_assign_var -> type VARNAME EQUAL var_value SEMICOLON .)
    VOID            reduce using rule 34 (declare_assign_var -> type VARNAME EQUAL var_value SEMICOLON .)
    INT             reduce using rule 34 (declare_assign_var -> type VARNAME EQUAL var_value SEMICOLON .)
    FLOAT           reduce using rule 34 (declare_assign_var -> type VARNAME EQUAL var_value SEMICOLON .)
    CHAR            reduce using rule 34 (declare_assign_var -> type VARNAME EQUAL var_value SEMICOLON .)
    STRING          reduce using rule 34 (declare_assign_var -> type VARNAME EQUAL var_value SEMICOLON .)
    BOOL            reduce using rule 34 (declare_assign_var -> type VARNAME EQUAL var_value SEMICOLON .)
    RBRACE          reduce using rule 34 (declare_assign_var -> type VARNAME EQUAL var_value SEMICOLON .)
    PUBLIC          reduce using rule 34 (declare_assign_var -> type VARNAME EQUAL var_value SEMICOLON .)
    PRIVATE         reduce using rule 34 (declare_assign_var -> type VARNAME EQUAL var_value SEMICOLON .)
    PROTECTED       reduce using rule 34 (declare_assign_var -> type VARNAME EQUAL var_value SEMICOLON .)
    VARNAME         reduce using rule 34 (declare_assign_var -> type VARNAME EQUAL var_value SEMICOLON .)
    RETURN          reduce using rule 34 (declare_assign_var -> type VARNAME EQUAL var_value SEMICOLON .)
    IF              reduce using rule 34 (declare_assign_var -> type VARNAME EQUAL var_value SEMICOLON .)
    WHILE           reduce using rule 34 (declare_assign_var -> type VARNAME EQUAL var_value SEMICOLON .)
    FOR             reduce using rule 34 (declare_assign_var -> type VARNAME EQUAL var_value SEMICOLON .)
    COUT            reduce using rule 34 (declare_assign_var -> type VARNAME EQUAL var_value SEMICOLON .)
    CIN             reduce using rule 34 (declare_assign_var -> type VARNAME EQUAL var_value SEMICOLON .)


state 89

    (35) declare_assign_var -> type VARNAME EQUAL calculation SEMICOLON .

    CLASS           reduce using rule 35 (declare_assign_var -> type VARNAME EQUAL calculation SEMICOLON .)
    VOID            reduce using rule 35 (declare_assign_var -> type VARNAME EQUAL calculation SEMICOLON .)
    INT             reduce using rule 35 (declare_assign_var -> type VARNAME EQUAL calculation SEMICOLON .)
    FLOAT           reduce using rule 35 (declare_assign_var -> type VARNAME EQUAL calculation SEMICOLON .)
    CHAR            reduce using rule 35 (declare_assign_var -> type VARNAME EQUAL calculation SEMICOLON .)
    STRING          reduce using rule 35 (declare_assign_var -> type VARNAME EQUAL calculation SEMICOLON .)
    BOOL            reduce using rule 35 (declare_assign_var -> type VARNAME EQUAL calculation SEMICOLON .)
    RBRACE          reduce using rule 35 (declare_assign_var -> type VARNAME EQUAL calculation SEMICOLON .)
    PUBLIC          reduce using rule 35 (declare_assign_var -> type VARNAME EQUAL calculation SEMICOLON .)
    PRIVATE         reduce using rule 35 (declare_assign_var -> type VARNAME EQUAL calculation SEMICOLON .)
    PROTECTED       reduce using rule 35 (declare_assign_var -> type VARNAME EQUAL calculation SEMICOLON .)
    VARNAME         reduce using rule 35 (declare_assign_var -> type VARNAME EQUAL calculation SEMICOLON .)
    RETURN          reduce using rule 35 (declare_assign_var -> type VARNAME EQUAL calculation SEMICOLON .)
    IF              reduce using rule 35 (declare_assign_var -> type VARNAME EQUAL calculation SEMICOLON .)
    WHILE           reduce using rule 35 (declare_assign_var -> type VARNAME EQUAL calculation SEMICOLON .)
    FOR             reduce using rule 35 (declare_assign_var -> type VARNAME EQUAL calculation SEMICOLON .)
    COUT            reduce using rule 35 (declare_assign_var -> type VARNAME EQUAL calculation SEMICOLON .)
    CIN             reduce using rule 35 (declare_assign_var -> type VARNAME EQUAL calculation SEMICOLON .)


state 90

    (69) calculation -> number math_operator . number
    (77) number -> . INTVAR
    (78) number -> . FLOATVAR

    INTVAR          shift and go to state 130
    FLOATVAR        shift and go to state 131

    number                         shift and go to state 129

state 91

    (81) math_operator -> PLUS .

    INTVAR          reduce using rule 81 (math_operator -> PLUS .)
    FLOATVAR        reduce using rule 81 (math_operator -> PLUS .)
    EQUAL           reduce using rule 81 (math_operator -> PLUS .)


state 92

    (82) math_operator -> MINUS .

    INTVAR          reduce using rule 82 (math_operator -> MINUS .)
    FLOATVAR        reduce using rule 82 (math_operator -> MINUS .)
    EQUAL           reduce using rule 82 (math_operator -> MINUS .)


state 93

    (83) math_operator -> MUL .

    INTVAR          reduce using rule 83 (math_operator -> MUL .)
    FLOATVAR        reduce using rule 83 (math_operator -> MUL .)
    EQUAL           reduce using rule 83 (math_operator -> MUL .)


state 94

    (84) math_operator -> DIV .

    INTVAR          reduce using rule 84 (math_operator -> DIV .)
    FLOATVAR        reduce using rule 84 (math_operator -> DIV .)
    EQUAL           reduce using rule 84 (math_operator -> DIV .)


state 95

    (85) math_operator -> MOD .

    INTVAR          reduce using rule 85 (math_operator -> MOD .)
    FLOATVAR        reduce using rule 85 (math_operator -> MOD .)
    EQUAL           reduce using rule 85 (math_operator -> MOD .)


state 96

    (10) main_func -> VOID MAIN LPARENTH RPARENTH LBRACE func_block . RBRACE SEMICOLON

    RBRACE          shift and go to state 132


state 97

    (49) func_block -> statement .
    (50) func_block -> statement . return_statement
    (60) statement -> statement . statement
    (28) return_statement -> . RETURN var_value SEMICOLON
    (29) return_statement -> . RETURN SEMICOLON
    (52) statement -> . variable_def
    (53) statement -> . if_statement
    (54) statement -> . while_statement
    (55) statement -> . for_statement
    (56) statement -> . print_out
    (57) statement -> . cin_in
    (58) statement -> . VARNAME EQUAL calculation SEMICOLON
    (59) statement -> . assign_var
    (60) statement -> . statement statement
    (32) variable_def -> . declare_var
    (33) variable_def -> . declare_assign_var
    (15) if_statement -> . IF LPARENTH condition RPARENTH LBRACE func_block RBRACE else_block
    (16) if_statement -> . IF LPARENTH condition RPARENTH LBRACE func_block RBRACE
    (22) while_statement -> . WHILE LPARENTH condition RPARENTH LBRACE func_block RBRACE
    (23) for_statement -> . FOR LPARENTH INT VARNAME EQUAL INTVAR SEMICOLON VARNAME comparator INTVAR SEMICOLON VARNAME math_operator EQUAL INTVAR RPARENTH LBRACE func_block RBRACE
    (24) for_statement -> . FOR LPARENTH SEMICOLON SEMICOLON RPARENTH LBRACE func_block RBRACE
    (61) print_out -> . COUT cout_expression_string SEMICOLON
    (76) cin_in -> . CIN RBIT VARNAME SEMICOLON
    (30) assign_var -> . VARNAME EQUAL var_value SEMICOLON
    (31) assign_var -> . VARNAME EQUAL calculation SEMICOLON
    (36) declare_var -> . type VARNAME SEMICOLON
    (34) declare_assign_var -> . type VARNAME EQUAL var_value SEMICOLON
    (35) declare_assign_var -> . type VARNAME EQUAL calculation SEMICOLON
    (71) type -> . INT
    (72) type -> . FLOAT
    (73) type -> . CHAR
    (74) type -> . STRING
    (75) type -> . BOOL

    RBRACE          reduce using rule 49 (func_block -> statement .)
    RETURN          shift and go to state 107
    VARNAME         shift and go to state 105
    IF              shift and go to state 108
    WHILE           shift and go to state 109
    FOR             shift and go to state 110
    COUT            shift and go to state 111
    CIN             shift and go to state 112
    INT             shift and go to state 29
    FLOAT           shift and go to state 20
    CHAR            shift and go to state 21
    STRING          shift and go to state 22
    BOOL            shift and go to state 23

    statement                      shift and go to state 133
    return_statement               shift and go to state 134
    variable_def                   shift and go to state 99
    if_statement                   shift and go to state 100
    while_statement                shift and go to state 101
    for_statement                  shift and go to state 102
    print_out                      shift and go to state 103
    cin_in                         shift and go to state 104
    assign_var                     shift and go to state 106
    declare_var                    shift and go to state 15
    declare_assign_var             shift and go to state 16
    type                           shift and go to state 113

state 98

    (51) func_block -> return_statement .

    RBRACE          reduce using rule 51 (func_block -> return_statement .)


state 99

    (52) statement -> variable_def .

    RETURN          reduce using rule 52 (statement -> variable_def .)
    VARNAME         reduce using rule 52 (statement -> variable_def .)
    IF              reduce using rule 52 (statement -> variable_def .)
    WHILE           reduce using rule 52 (statement -> variable_def .)
    FOR             reduce using rule 52 (statement -> variable_def .)
    COUT            reduce using rule 52 (statement -> variable_def .)
    CIN             reduce using rule 52 (statement -> variable_def .)
    INT             reduce using rule 52 (statement -> variable_def .)
    FLOAT           reduce using rule 52 (statement -> variable_def .)
    CHAR            reduce using rule 52 (statement -> variable_def .)
    STRING          reduce using rule 52 (statement -> variable_def .)
    BOOL            reduce using rule 52 (statement -> variable_def .)
    RBRACE          reduce using rule 52 (statement -> variable_def .)


state 100

    (53) statement -> if_statement .

    RETURN          reduce using rule 53 (statement -> if_statement .)
    VARNAME         reduce using rule 53 (statement -> if_statement .)
    IF              reduce using rule 53 (statement -> if_statement .)
    WHILE           reduce using rule 53 (statement -> if_statement .)
    FOR             reduce using rule 53 (statement -> if_statement .)
    COUT            reduce using rule 53 (statement -> if_statement .)
    CIN             reduce using rule 53 (statement -> if_statement .)
    INT             reduce using rule 53 (statement -> if_statement .)
    FLOAT           reduce using rule 53 (statement -> if_statement .)
    CHAR            reduce using rule 53 (statement -> if_statement .)
    STRING          reduce using rule 53 (statement -> if_statement .)
    BOOL            reduce using rule 53 (statement -> if_statement .)
    RBRACE          reduce using rule 53 (statement -> if_statement .)


state 101

    (54) statement -> while_statement .

    RETURN          reduce using rule 54 (statement -> while_statement .)
    VARNAME         reduce using rule 54 (statement -> while_statement .)
    IF              reduce using rule 54 (statement -> while_statement .)
    WHILE           reduce using rule 54 (statement -> while_statement .)
    FOR             reduce using rule 54 (statement -> while_statement .)
    COUT            reduce using rule 54 (statement -> while_statement .)
    CIN             reduce using rule 54 (statement -> while_statement .)
    INT             reduce using rule 54 (statement -> while_statement .)
    FLOAT           reduce using rule 54 (statement -> while_statement .)
    CHAR            reduce using rule 54 (statement -> while_statement .)
    STRING          reduce using rule 54 (statement -> while_statement .)
    BOOL            reduce using rule 54 (statement -> while_statement .)
    RBRACE          reduce using rule 54 (statement -> while_statement .)


state 102

    (55) statement -> for_statement .

    RETURN          reduce using rule 55 (statement -> for_statement .)
    VARNAME         reduce using rule 55 (statement -> for_statement .)
    IF              reduce using rule 55 (statement -> for_statement .)
    WHILE           reduce using rule 55 (statement -> for_statement .)
    FOR             reduce using rule 55 (statement -> for_statement .)
    COUT            reduce using rule 55 (statement -> for_statement .)
    CIN             reduce using rule 55 (statement -> for_statement .)
    INT             reduce using rule 55 (statement -> for_statement .)
    FLOAT           reduce using rule 55 (statement -> for_statement .)
    CHAR            reduce using rule 55 (statement -> for_statement .)
    STRING          reduce using rule 55 (statement -> for_statement .)
    BOOL            reduce using rule 55 (statement -> for_statement .)
    RBRACE          reduce using rule 55 (statement -> for_statement .)


state 103

    (56) statement -> print_out .

    RETURN          reduce using rule 56 (statement -> print_out .)
    VARNAME         reduce using rule 56 (statement -> print_out .)
    IF              reduce using rule 56 (statement -> print_out .)
    WHILE           reduce using rule 56 (statement -> print_out .)
    FOR             reduce using rule 56 (statement -> print_out .)
    COUT            reduce using rule 56 (statement -> print_out .)
    CIN             reduce using rule 56 (statement -> print_out .)
    INT             reduce using rule 56 (statement -> print_out .)
    FLOAT           reduce using rule 56 (statement -> print_out .)
    CHAR            reduce using rule 56 (statement -> print_out .)
    STRING          reduce using rule 56 (statement -> print_out .)
    BOOL            reduce using rule 56 (statement -> print_out .)
    RBRACE          reduce using rule 56 (statement -> print_out .)


state 104

    (57) statement -> cin_in .

    RETURN          reduce using rule 57 (statement -> cin_in .)
    VARNAME         reduce using rule 57 (statement -> cin_in .)
    IF              reduce using rule 57 (statement -> cin_in .)
    WHILE           reduce using rule 57 (statement -> cin_in .)
    FOR             reduce using rule 57 (statement -> cin_in .)
    COUT            reduce using rule 57 (statement -> cin_in .)
    CIN             reduce using rule 57 (statement -> cin_in .)
    INT             reduce using rule 57 (statement -> cin_in .)
    FLOAT           reduce using rule 57 (statement -> cin_in .)
    CHAR            reduce using rule 57 (statement -> cin_in .)
    STRING          reduce using rule 57 (statement -> cin_in .)
    BOOL            reduce using rule 57 (statement -> cin_in .)
    RBRACE          reduce using rule 57 (statement -> cin_in .)


state 105

    (58) statement -> VARNAME . EQUAL calculation SEMICOLON
    (30) assign_var -> VARNAME . EQUAL var_value SEMICOLON
    (31) assign_var -> VARNAME . EQUAL calculation SEMICOLON

    EQUAL           shift and go to state 135


state 106

    (59) statement -> assign_var .

    RETURN          reduce using rule 59 (statement -> assign_var .)
    VARNAME         reduce using rule 59 (statement -> assign_var .)
    IF              reduce using rule 59 (statement -> assign_var .)
    WHILE           reduce using rule 59 (statement -> assign_var .)
    FOR             reduce using rule 59 (statement -> assign_var .)
    COUT            reduce using rule 59 (statement -> assign_var .)
    CIN             reduce using rule 59 (statement -> assign_var .)
    INT             reduce using rule 59 (statement -> assign_var .)
    FLOAT           reduce using rule 59 (statement -> assign_var .)
    CHAR            reduce using rule 59 (statement -> assign_var .)
    STRING          reduce using rule 59 (statement -> assign_var .)
    BOOL            reduce using rule 59 (statement -> assign_var .)
    RBRACE          reduce using rule 59 (statement -> assign_var .)


state 107

    (28) return_statement -> RETURN . var_value SEMICOLON
    (29) return_statement -> RETURN . SEMICOLON
    (92) var_value -> . INTVAR
    (93) var_value -> . FLOATVAR
    (94) var_value -> . STRINGVAR
    (95) var_value -> . bool_value
    (96) bool_value -> . TRUE
    (97) bool_value -> . FALSE

    SEMICOLON       shift and go to state 137
    INTVAR          shift and go to state 138
    FLOATVAR        shift and go to state 139
    STRINGVAR       shift and go to state 66
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70

    var_value                      shift and go to state 136
    bool_value                     shift and go to state 67

state 108

    (15) if_statement -> IF . LPARENTH condition RPARENTH LBRACE func_block RBRACE else_block
    (16) if_statement -> IF . LPARENTH condition RPARENTH LBRACE func_block RBRACE

    LPARENTH        shift and go to state 140


state 109

    (22) while_statement -> WHILE . LPARENTH condition RPARENTH LBRACE func_block RBRACE

    LPARENTH        shift and go to state 141


state 110

    (23) for_statement -> FOR . LPARENTH INT VARNAME EQUAL INTVAR SEMICOLON VARNAME comparator INTVAR SEMICOLON VARNAME math_operator EQUAL INTVAR RPARENTH LBRACE func_block RBRACE
    (24) for_statement -> FOR . LPARENTH SEMICOLON SEMICOLON RPARENTH LBRACE func_block RBRACE

    LPARENTH        shift and go to state 142


state 111

    (61) print_out -> COUT . cout_expression_string SEMICOLON
    (62) cout_expression_string -> . cout_expression cout_expression_string
    (63) cout_expression_string -> . cout_expression
    (64) cout_expression -> . LBIT printable

    LBIT            shift and go to state 145

    cout_expression_string         shift and go to state 143
    cout_expression                shift and go to state 144

state 112

    (76) cin_in -> CIN . RBIT VARNAME SEMICOLON

    RBIT            shift and go to state 146


state 113

    (36) declare_var -> type . VARNAME SEMICOLON
    (34) declare_assign_var -> type . VARNAME EQUAL var_value SEMICOLON
    (35) declare_assign_var -> type . VARNAME EQUAL calculation SEMICOLON

    VARNAME         shift and go to state 34


state 114

    (11) main_func -> INT MAIN LPARENTH RPARENTH LBRACE func_block . RBRACE SEMICOLON

    RBRACE          shift and go to state 147


state 115

    (12) main_func -> INT MAIN LPARENTH RPARENTH LBRACE RBRACE . SEMICOLON

    SEMICOLON       shift and go to state 148


state 116

    (30) assign_var -> VARNAME EQUAL var_value . SEMICOLON

    SEMICOLON       shift and go to state 149


state 117

    (31) assign_var -> VARNAME EQUAL calculation . SEMICOLON

    SEMICOLON       shift and go to state 150


state 118

    (37) class_variable -> access_modifier . COLON variable_def

    COLON           shift and go to state 151


state 119

    (25) class -> CLASS VARNAME LBRACE class_variable class_functions RBRACE . SEMICOLON

    SEMICOLON       shift and go to state 152


state 120

    (27) class -> CLASS VARNAME LBRACE class_variable RBRACE SEMICOLON .

    CLASS           reduce using rule 27 (class -> CLASS VARNAME LBRACE class_variable RBRACE SEMICOLON .)
    VOID            reduce using rule 27 (class -> CLASS VARNAME LBRACE class_variable RBRACE SEMICOLON .)
    INT             reduce using rule 27 (class -> CLASS VARNAME LBRACE class_variable RBRACE SEMICOLON .)
    FLOAT           reduce using rule 27 (class -> CLASS VARNAME LBRACE class_variable RBRACE SEMICOLON .)
    CHAR            reduce using rule 27 (class -> CLASS VARNAME LBRACE class_variable RBRACE SEMICOLON .)
    STRING          reduce using rule 27 (class -> CLASS VARNAME LBRACE class_variable RBRACE SEMICOLON .)
    BOOL            reduce using rule 27 (class -> CLASS VARNAME LBRACE class_variable RBRACE SEMICOLON .)


state 121

    (41) class_functions -> access_modifier COLON . function
    (37) class_variable -> access_modifier COLON . variable_def
    (44) function -> . return_type VARNAME LPARENTH parameters RPARENTH LBRACE func_block RBRACE
    (45) function -> . return_type VARNAME LPARENTH RPARENTH LBRACE func_block RBRACE
    (32) variable_def -> . declare_var
    (33) variable_def -> . declare_assign_var
    (79) return_type -> . type
    (80) return_type -> . VOID
    (36) declare_var -> . type VARNAME SEMICOLON
    (34) declare_assign_var -> . type VARNAME EQUAL var_value SEMICOLON
    (35) declare_assign_var -> . type VARNAME EQUAL calculation SEMICOLON
    (71) type -> . INT
    (72) type -> . FLOAT
    (73) type -> . CHAR
    (74) type -> . STRING
    (75) type -> . BOOL

    VOID            shift and go to state 28
    INT             shift and go to state 29
    FLOAT           shift and go to state 20
    CHAR            shift and go to state 21
    STRING          shift and go to state 22
    BOOL            shift and go to state 23

    function                       shift and go to state 125
    variable_def                   shift and go to state 124
    return_type                    shift and go to state 18
    declare_var                    shift and go to state 15
    declare_assign_var             shift and go to state 16
    type                           shift and go to state 79

state 122

    (26) class -> CLASS VARNAME LBRACE class_functions RBRACE SEMICOLON .

    CLASS           reduce using rule 26 (class -> CLASS VARNAME LBRACE class_functions RBRACE SEMICOLON .)
    VOID            reduce using rule 26 (class -> CLASS VARNAME LBRACE class_functions RBRACE SEMICOLON .)
    INT             reduce using rule 26 (class -> CLASS VARNAME LBRACE class_functions RBRACE SEMICOLON .)
    FLOAT           reduce using rule 26 (class -> CLASS VARNAME LBRACE class_functions RBRACE SEMICOLON .)
    CHAR            reduce using rule 26 (class -> CLASS VARNAME LBRACE class_functions RBRACE SEMICOLON .)
    STRING          reduce using rule 26 (class -> CLASS VARNAME LBRACE class_functions RBRACE SEMICOLON .)
    BOOL            reduce using rule 26 (class -> CLASS VARNAME LBRACE class_functions RBRACE SEMICOLON .)


state 123

    (41) class_functions -> access_modifier COLON . function
    (44) function -> . return_type VARNAME LPARENTH parameters RPARENTH LBRACE func_block RBRACE
    (45) function -> . return_type VARNAME LPARENTH RPARENTH LBRACE func_block RBRACE
    (79) return_type -> . type
    (80) return_type -> . VOID
    (71) type -> . INT
    (72) type -> . FLOAT
    (73) type -> . CHAR
    (74) type -> . STRING
    (75) type -> . BOOL

    VOID            shift and go to state 28
    INT             shift and go to state 29
    FLOAT           shift and go to state 20
    CHAR            shift and go to state 21
    STRING          shift and go to state 22
    BOOL            shift and go to state 23

    function                       shift and go to state 125
    return_type                    shift and go to state 18
    type                           shift and go to state 83

state 124

    (37) class_variable -> access_modifier COLON variable_def .

    RBRACE          reduce using rule 37 (class_variable -> access_modifier COLON variable_def .)
    PUBLIC          reduce using rule 37 (class_variable -> access_modifier COLON variable_def .)
    PRIVATE         reduce using rule 37 (class_variable -> access_modifier COLON variable_def .)
    PROTECTED       reduce using rule 37 (class_variable -> access_modifier COLON variable_def .)
    VARNAME         reduce using rule 37 (class_variable -> access_modifier COLON variable_def .)
    VOID            reduce using rule 37 (class_variable -> access_modifier COLON variable_def .)
    INT             reduce using rule 37 (class_variable -> access_modifier COLON variable_def .)
    FLOAT           reduce using rule 37 (class_variable -> access_modifier COLON variable_def .)
    CHAR            reduce using rule 37 (class_variable -> access_modifier COLON variable_def .)
    STRING          reduce using rule 37 (class_variable -> access_modifier COLON variable_def .)
    BOOL            reduce using rule 37 (class_variable -> access_modifier COLON variable_def .)


state 125

    (41) class_functions -> access_modifier COLON function .

    RBRACE          reduce using rule 41 (class_functions -> access_modifier COLON function .)
    PUBLIC          reduce using rule 41 (class_functions -> access_modifier COLON function .)
    PRIVATE         reduce using rule 41 (class_functions -> access_modifier COLON function .)
    PROTECTED       reduce using rule 41 (class_functions -> access_modifier COLON function .)
    VOID            reduce using rule 41 (class_functions -> access_modifier COLON function .)
    INT             reduce using rule 41 (class_functions -> access_modifier COLON function .)
    FLOAT           reduce using rule 41 (class_functions -> access_modifier COLON function .)
    CHAR            reduce using rule 41 (class_functions -> access_modifier COLON function .)
    STRING          reduce using rule 41 (class_functions -> access_modifier COLON function .)
    BOOL            reduce using rule 41 (class_functions -> access_modifier COLON function .)


state 126

    (44) function -> return_type VARNAME LPARENTH parameters RPARENTH LBRACE . func_block RBRACE
    (49) func_block -> . statement
    (50) func_block -> . statement return_statement
    (51) func_block -> . return_statement
    (52) statement -> . variable_def
    (53) statement -> . if_statement
    (54) statement -> . while_statement
    (55) statement -> . for_statement
    (56) statement -> . print_out
    (57) statement -> . cin_in
    (58) statement -> . VARNAME EQUAL calculation SEMICOLON
    (59) statement -> . assign_var
    (60) statement -> . statement statement
    (28) return_statement -> . RETURN var_value SEMICOLON
    (29) return_statement -> . RETURN SEMICOLON
    (32) variable_def -> . declare_var
    (33) variable_def -> . declare_assign_var
    (15) if_statement -> . IF LPARENTH condition RPARENTH LBRACE func_block RBRACE else_block
    (16) if_statement -> . IF LPARENTH condition RPARENTH LBRACE func_block RBRACE
    (22) while_statement -> . WHILE LPARENTH condition RPARENTH LBRACE func_block RBRACE
    (23) for_statement -> . FOR LPARENTH INT VARNAME EQUAL INTVAR SEMICOLON VARNAME comparator INTVAR SEMICOLON VARNAME math_operator EQUAL INTVAR RPARENTH LBRACE func_block RBRACE
    (24) for_statement -> . FOR LPARENTH SEMICOLON SEMICOLON RPARENTH LBRACE func_block RBRACE
    (61) print_out -> . COUT cout_expression_string SEMICOLON
    (76) cin_in -> . CIN RBIT VARNAME SEMICOLON
    (30) assign_var -> . VARNAME EQUAL var_value SEMICOLON
    (31) assign_var -> . VARNAME EQUAL calculation SEMICOLON
    (36) declare_var -> . type VARNAME SEMICOLON
    (34) declare_assign_var -> . type VARNAME EQUAL var_value SEMICOLON
    (35) declare_assign_var -> . type VARNAME EQUAL calculation SEMICOLON
    (71) type -> . INT
    (72) type -> . FLOAT
    (73) type -> . CHAR
    (74) type -> . STRING
    (75) type -> . BOOL

    VARNAME         shift and go to state 105
    RETURN          shift and go to state 107
    IF              shift and go to state 108
    WHILE           shift and go to state 109
    FOR             shift and go to state 110
    COUT            shift and go to state 111
    CIN             shift and go to state 112
    INT             shift and go to state 29
    FLOAT           shift and go to state 20
    CHAR            shift and go to state 21
    STRING          shift and go to state 22
    BOOL            shift and go to state 23

    func_block                     shift and go to state 153
    statement                      shift and go to state 97
    return_statement               shift and go to state 98
    variable_def                   shift and go to state 99
    if_statement                   shift and go to state 100
    while_statement                shift and go to state 101
    for_statement                  shift and go to state 102
    print_out                      shift and go to state 103
    cin_in                         shift and go to state 104
    assign_var                     shift and go to state 106
    declare_var                    shift and go to state 15
    declare_assign_var             shift and go to state 16
    type                           shift and go to state 113

state 127

    (45) function -> return_type VARNAME LPARENTH RPARENTH LBRACE func_block . RBRACE

    RBRACE          shift and go to state 154


state 128

    (14) parameters -> type VARNAME COMMA . parameters
    (13) parameters -> . type VARNAME
    (14) parameters -> . type VARNAME COMMA parameters
    (71) type -> . INT
    (72) type -> . FLOAT
    (73) type -> . CHAR
    (74) type -> . STRING
    (75) type -> . BOOL

    INT             shift and go to state 29
    FLOAT           shift and go to state 20
    CHAR            shift and go to state 21
    STRING          shift and go to state 22
    BOOL            shift and go to state 23

    type                           shift and go to state 61
    parameters                     shift and go to state 155

state 129

    (69) calculation -> number math_operator number .

    SEMICOLON       reduce using rule 69 (calculation -> number math_operator number .)


state 130

    (77) number -> INTVAR .

    SEMICOLON       reduce using rule 77 (number -> INTVAR .)


state 131

    (78) number -> FLOATVAR .

    SEMICOLON       reduce using rule 78 (number -> FLOATVAR .)


state 132

    (10) main_func -> VOID MAIN LPARENTH RPARENTH LBRACE func_block RBRACE . SEMICOLON

    SEMICOLON       shift and go to state 156


state 133

    (60) statement -> statement statement .
    (60) statement -> statement . statement
    (52) statement -> . variable_def
    (53) statement -> . if_statement
    (54) statement -> . while_statement
    (55) statement -> . for_statement
    (56) statement -> . print_out
    (57) statement -> . cin_in
    (58) statement -> . VARNAME EQUAL calculation SEMICOLON
    (59) statement -> . assign_var
    (60) statement -> . statement statement
    (32) variable_def -> . declare_var
    (33) variable_def -> . declare_assign_var
    (15) if_statement -> . IF LPARENTH condition RPARENTH LBRACE func_block RBRACE else_block
    (16) if_statement -> . IF LPARENTH condition RPARENTH LBRACE func_block RBRACE
    (22) while_statement -> . WHILE LPARENTH condition RPARENTH LBRACE func_block RBRACE
    (23) for_statement -> . FOR LPARENTH INT VARNAME EQUAL INTVAR SEMICOLON VARNAME comparator INTVAR SEMICOLON VARNAME math_operator EQUAL INTVAR RPARENTH LBRACE func_block RBRACE
    (24) for_statement -> . FOR LPARENTH SEMICOLON SEMICOLON RPARENTH LBRACE func_block RBRACE
    (61) print_out -> . COUT cout_expression_string SEMICOLON
    (76) cin_in -> . CIN RBIT VARNAME SEMICOLON
    (30) assign_var -> . VARNAME EQUAL var_value SEMICOLON
    (31) assign_var -> . VARNAME EQUAL calculation SEMICOLON
    (36) declare_var -> . type VARNAME SEMICOLON
    (34) declare_assign_var -> . type VARNAME EQUAL var_value SEMICOLON
    (35) declare_assign_var -> . type VARNAME EQUAL calculation SEMICOLON
    (71) type -> . INT
    (72) type -> . FLOAT
    (73) type -> . CHAR
    (74) type -> . STRING
    (75) type -> . BOOL

  ! shift/reduce conflict for VARNAME resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for COUT resolved as shift
  ! shift/reduce conflict for CIN resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
    RETURN          reduce using rule 60 (statement -> statement statement .)
    RBRACE          reduce using rule 60 (statement -> statement statement .)
    VARNAME         shift and go to state 105
    IF              shift and go to state 108
    WHILE           shift and go to state 109
    FOR             shift and go to state 110
    COUT            shift and go to state 111
    CIN             shift and go to state 112
    INT             shift and go to state 29
    FLOAT           shift and go to state 20
    CHAR            shift and go to state 21
    STRING          shift and go to state 22
    BOOL            shift and go to state 23

  ! VARNAME         [ reduce using rule 60 (statement -> statement statement .) ]
  ! IF              [ reduce using rule 60 (statement -> statement statement .) ]
  ! WHILE           [ reduce using rule 60 (statement -> statement statement .) ]
  ! FOR             [ reduce using rule 60 (statement -> statement statement .) ]
  ! COUT            [ reduce using rule 60 (statement -> statement statement .) ]
  ! CIN             [ reduce using rule 60 (statement -> statement statement .) ]
  ! INT             [ reduce using rule 60 (statement -> statement statement .) ]
  ! FLOAT           [ reduce using rule 60 (statement -> statement statement .) ]
  ! CHAR            [ reduce using rule 60 (statement -> statement statement .) ]
  ! STRING          [ reduce using rule 60 (statement -> statement statement .) ]
  ! BOOL            [ reduce using rule 60 (statement -> statement statement .) ]

    statement                      shift and go to state 133
    variable_def                   shift and go to state 99
    if_statement                   shift and go to state 100
    while_statement                shift and go to state 101
    for_statement                  shift and go to state 102
    print_out                      shift and go to state 103
    cin_in                         shift and go to state 104
    assign_var                     shift and go to state 106
    declare_var                    shift and go to state 15
    declare_assign_var             shift and go to state 16
    type                           shift and go to state 113

state 134

    (50) func_block -> statement return_statement .

    RBRACE          reduce using rule 50 (func_block -> statement return_statement .)


state 135

    (58) statement -> VARNAME EQUAL . calculation SEMICOLON
    (30) assign_var -> VARNAME EQUAL . var_value SEMICOLON
    (31) assign_var -> VARNAME EQUAL . calculation SEMICOLON
    (69) calculation -> . number math_operator number
    (92) var_value -> . INTVAR
    (93) var_value -> . FLOATVAR
    (94) var_value -> . STRINGVAR
    (95) var_value -> . bool_value
    (77) number -> . INTVAR
    (78) number -> . FLOATVAR
    (96) bool_value -> . TRUE
    (97) bool_value -> . FALSE

    INTVAR          shift and go to state 64
    FLOATVAR        shift and go to state 65
    STRINGVAR       shift and go to state 66
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70

    calculation                    shift and go to state 157
    var_value                      shift and go to state 116
    number                         shift and go to state 68
    bool_value                     shift and go to state 67

state 136

    (28) return_statement -> RETURN var_value . SEMICOLON

    SEMICOLON       shift and go to state 158


state 137

    (29) return_statement -> RETURN SEMICOLON .

    RBRACE          reduce using rule 29 (return_statement -> RETURN SEMICOLON .)


state 138

    (92) var_value -> INTVAR .

    SEMICOLON       reduce using rule 92 (var_value -> INTVAR .)
    GTHAN           reduce using rule 92 (var_value -> INTVAR .)
    LTHAN           reduce using rule 92 (var_value -> INTVAR .)
    LESS_EQUAL      reduce using rule 92 (var_value -> INTVAR .)
    DEQUAL          reduce using rule 92 (var_value -> INTVAR .)
    GREATER_EQUAL   reduce using rule 92 (var_value -> INTVAR .)
    NOT_EQUAL       reduce using rule 92 (var_value -> INTVAR .)
    LBIT            reduce using rule 92 (var_value -> INTVAR .)
    RPARENTH        reduce using rule 92 (var_value -> INTVAR .)


state 139

    (93) var_value -> FLOATVAR .

    SEMICOLON       reduce using rule 93 (var_value -> FLOATVAR .)
    GTHAN           reduce using rule 93 (var_value -> FLOATVAR .)
    LTHAN           reduce using rule 93 (var_value -> FLOATVAR .)
    LESS_EQUAL      reduce using rule 93 (var_value -> FLOATVAR .)
    DEQUAL          reduce using rule 93 (var_value -> FLOATVAR .)
    GREATER_EQUAL   reduce using rule 93 (var_value -> FLOATVAR .)
    NOT_EQUAL       reduce using rule 93 (var_value -> FLOATVAR .)
    LBIT            reduce using rule 93 (var_value -> FLOATVAR .)
    RPARENTH        reduce using rule 93 (var_value -> FLOATVAR .)


state 140

    (15) if_statement -> IF LPARENTH . condition RPARENTH LBRACE func_block RBRACE else_block
    (16) if_statement -> IF LPARENTH . condition RPARENTH LBRACE func_block RBRACE
    (18) condition -> . var_value comparator var_value
    (19) condition -> . VARNAME comparator VARNAME
    (20) condition -> . VARNAME comparator var_value
    (21) condition -> . var_value comparator VARNAME
    (92) var_value -> . INTVAR
    (93) var_value -> . FLOATVAR
    (94) var_value -> . STRINGVAR
    (95) var_value -> . bool_value
    (96) bool_value -> . TRUE
    (97) bool_value -> . FALSE

    VARNAME         shift and go to state 161
    INTVAR          shift and go to state 138
    FLOATVAR        shift and go to state 139
    STRINGVAR       shift and go to state 66
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70

    condition                      shift and go to state 159
    var_value                      shift and go to state 160
    bool_value                     shift and go to state 67

state 141

    (22) while_statement -> WHILE LPARENTH . condition RPARENTH LBRACE func_block RBRACE
    (18) condition -> . var_value comparator var_value
    (19) condition -> . VARNAME comparator VARNAME
    (20) condition -> . VARNAME comparator var_value
    (21) condition -> . var_value comparator VARNAME
    (92) var_value -> . INTVAR
    (93) var_value -> . FLOATVAR
    (94) var_value -> . STRINGVAR
    (95) var_value -> . bool_value
    (96) bool_value -> . TRUE
    (97) bool_value -> . FALSE

    VARNAME         shift and go to state 161
    INTVAR          shift and go to state 138
    FLOATVAR        shift and go to state 139
    STRINGVAR       shift and go to state 66
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70

    condition                      shift and go to state 162
    var_value                      shift and go to state 160
    bool_value                     shift and go to state 67

state 142

    (23) for_statement -> FOR LPARENTH . INT VARNAME EQUAL INTVAR SEMICOLON VARNAME comparator INTVAR SEMICOLON VARNAME math_operator EQUAL INTVAR RPARENTH LBRACE func_block RBRACE
    (24) for_statement -> FOR LPARENTH . SEMICOLON SEMICOLON RPARENTH LBRACE func_block RBRACE

    INT             shift and go to state 163
    SEMICOLON       shift and go to state 164


state 143

    (61) print_out -> COUT cout_expression_string . SEMICOLON

    SEMICOLON       shift and go to state 165


state 144

    (62) cout_expression_string -> cout_expression . cout_expression_string
    (63) cout_expression_string -> cout_expression .
    (62) cout_expression_string -> . cout_expression cout_expression_string
    (63) cout_expression_string -> . cout_expression
    (64) cout_expression -> . LBIT printable

    SEMICOLON       reduce using rule 63 (cout_expression_string -> cout_expression .)
    LBIT            shift and go to state 145

    cout_expression                shift and go to state 144
    cout_expression_string         shift and go to state 166

state 145

    (64) cout_expression -> LBIT . printable
    (65) printable -> . var_value
    (66) printable -> . VARNAME
    (67) printable -> . ENDL
    (68) printable -> . STRINGVAR
    (92) var_value -> . INTVAR
    (93) var_value -> . FLOATVAR
    (94) var_value -> . STRINGVAR
    (95) var_value -> . bool_value
    (96) bool_value -> . TRUE
    (97) bool_value -> . FALSE

    VARNAME         shift and go to state 169
    ENDL            shift and go to state 170
    STRINGVAR       shift and go to state 171
    INTVAR          shift and go to state 138
    FLOATVAR        shift and go to state 139
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70

    printable                      shift and go to state 167
    var_value                      shift and go to state 168
    bool_value                     shift and go to state 67

state 146

    (76) cin_in -> CIN RBIT . VARNAME SEMICOLON

    VARNAME         shift and go to state 172


state 147

    (11) main_func -> INT MAIN LPARENTH RPARENTH LBRACE func_block RBRACE . SEMICOLON

    SEMICOLON       shift and go to state 173


state 148

    (12) main_func -> INT MAIN LPARENTH RPARENTH LBRACE RBRACE SEMICOLON .

    $end            reduce using rule 12 (main_func -> INT MAIN LPARENTH RPARENTH LBRACE RBRACE SEMICOLON .)


state 149

    (30) assign_var -> VARNAME EQUAL var_value SEMICOLON .

    RBRACE          reduce using rule 30 (assign_var -> VARNAME EQUAL var_value SEMICOLON .)
    PUBLIC          reduce using rule 30 (assign_var -> VARNAME EQUAL var_value SEMICOLON .)
    PRIVATE         reduce using rule 30 (assign_var -> VARNAME EQUAL var_value SEMICOLON .)
    PROTECTED       reduce using rule 30 (assign_var -> VARNAME EQUAL var_value SEMICOLON .)
    VARNAME         reduce using rule 30 (assign_var -> VARNAME EQUAL var_value SEMICOLON .)
    VOID            reduce using rule 30 (assign_var -> VARNAME EQUAL var_value SEMICOLON .)
    INT             reduce using rule 30 (assign_var -> VARNAME EQUAL var_value SEMICOLON .)
    FLOAT           reduce using rule 30 (assign_var -> VARNAME EQUAL var_value SEMICOLON .)
    CHAR            reduce using rule 30 (assign_var -> VARNAME EQUAL var_value SEMICOLON .)
    STRING          reduce using rule 30 (assign_var -> VARNAME EQUAL var_value SEMICOLON .)
    BOOL            reduce using rule 30 (assign_var -> VARNAME EQUAL var_value SEMICOLON .)
    RETURN          reduce using rule 30 (assign_var -> VARNAME EQUAL var_value SEMICOLON .)
    IF              reduce using rule 30 (assign_var -> VARNAME EQUAL var_value SEMICOLON .)
    WHILE           reduce using rule 30 (assign_var -> VARNAME EQUAL var_value SEMICOLON .)
    FOR             reduce using rule 30 (assign_var -> VARNAME EQUAL var_value SEMICOLON .)
    COUT            reduce using rule 30 (assign_var -> VARNAME EQUAL var_value SEMICOLON .)
    CIN             reduce using rule 30 (assign_var -> VARNAME EQUAL var_value SEMICOLON .)


state 150

    (31) assign_var -> VARNAME EQUAL calculation SEMICOLON .

    RBRACE          reduce using rule 31 (assign_var -> VARNAME EQUAL calculation SEMICOLON .)
    PUBLIC          reduce using rule 31 (assign_var -> VARNAME EQUAL calculation SEMICOLON .)
    PRIVATE         reduce using rule 31 (assign_var -> VARNAME EQUAL calculation SEMICOLON .)
    PROTECTED       reduce using rule 31 (assign_var -> VARNAME EQUAL calculation SEMICOLON .)
    VARNAME         reduce using rule 31 (assign_var -> VARNAME EQUAL calculation SEMICOLON .)
    VOID            reduce using rule 31 (assign_var -> VARNAME EQUAL calculation SEMICOLON .)
    INT             reduce using rule 31 (assign_var -> VARNAME EQUAL calculation SEMICOLON .)
    FLOAT           reduce using rule 31 (assign_var -> VARNAME EQUAL calculation SEMICOLON .)
    CHAR            reduce using rule 31 (assign_var -> VARNAME EQUAL calculation SEMICOLON .)
    STRING          reduce using rule 31 (assign_var -> VARNAME EQUAL calculation SEMICOLON .)
    BOOL            reduce using rule 31 (assign_var -> VARNAME EQUAL calculation SEMICOLON .)


state 151

    (37) class_variable -> access_modifier COLON . variable_def
    (32) variable_def -> . declare_var
    (33) variable_def -> . declare_assign_var
    (36) declare_var -> . type VARNAME SEMICOLON
    (34) declare_assign_var -> . type VARNAME EQUAL var_value SEMICOLON
    (35) declare_assign_var -> . type VARNAME EQUAL calculation SEMICOLON
    (71) type -> . INT
    (72) type -> . FLOAT
    (73) type -> . CHAR
    (74) type -> . STRING
    (75) type -> . BOOL

    INT             shift and go to state 29
    FLOAT           shift and go to state 20
    CHAR            shift and go to state 21
    STRING          shift and go to state 22
    BOOL            shift and go to state 23

    variable_def                   shift and go to state 124
    declare_var                    shift and go to state 15
    declare_assign_var             shift and go to state 16
    type                           shift and go to state 113

state 152

    (25) class -> CLASS VARNAME LBRACE class_variable class_functions RBRACE SEMICOLON .

    CLASS           reduce using rule 25 (class -> CLASS VARNAME LBRACE class_variable class_functions RBRACE SEMICOLON .)
    VOID            reduce using rule 25 (class -> CLASS VARNAME LBRACE class_variable class_functions RBRACE SEMICOLON .)
    INT             reduce using rule 25 (class -> CLASS VARNAME LBRACE class_variable class_functions RBRACE SEMICOLON .)
    FLOAT           reduce using rule 25 (class -> CLASS VARNAME LBRACE class_variable class_functions RBRACE SEMICOLON .)
    CHAR            reduce using rule 25 (class -> CLASS VARNAME LBRACE class_variable class_functions RBRACE SEMICOLON .)
    STRING          reduce using rule 25 (class -> CLASS VARNAME LBRACE class_variable class_functions RBRACE SEMICOLON .)
    BOOL            reduce using rule 25 (class -> CLASS VARNAME LBRACE class_variable class_functions RBRACE SEMICOLON .)


state 153

    (44) function -> return_type VARNAME LPARENTH parameters RPARENTH LBRACE func_block . RBRACE

    RBRACE          shift and go to state 174


state 154

    (45) function -> return_type VARNAME LPARENTH RPARENTH LBRACE func_block RBRACE .

    CLASS           reduce using rule 45 (function -> return_type VARNAME LPARENTH RPARENTH LBRACE func_block RBRACE .)
    VOID            reduce using rule 45 (function -> return_type VARNAME LPARENTH RPARENTH LBRACE func_block RBRACE .)
    INT             reduce using rule 45 (function -> return_type VARNAME LPARENTH RPARENTH LBRACE func_block RBRACE .)
    FLOAT           reduce using rule 45 (function -> return_type VARNAME LPARENTH RPARENTH LBRACE func_block RBRACE .)
    CHAR            reduce using rule 45 (function -> return_type VARNAME LPARENTH RPARENTH LBRACE func_block RBRACE .)
    STRING          reduce using rule 45 (function -> return_type VARNAME LPARENTH RPARENTH LBRACE func_block RBRACE .)
    BOOL            reduce using rule 45 (function -> return_type VARNAME LPARENTH RPARENTH LBRACE func_block RBRACE .)
    RBRACE          reduce using rule 45 (function -> return_type VARNAME LPARENTH RPARENTH LBRACE func_block RBRACE .)
    PUBLIC          reduce using rule 45 (function -> return_type VARNAME LPARENTH RPARENTH LBRACE func_block RBRACE .)
    PRIVATE         reduce using rule 45 (function -> return_type VARNAME LPARENTH RPARENTH LBRACE func_block RBRACE .)
    PROTECTED       reduce using rule 45 (function -> return_type VARNAME LPARENTH RPARENTH LBRACE func_block RBRACE .)


state 155

    (14) parameters -> type VARNAME COMMA parameters .

    RPARENTH        reduce using rule 14 (parameters -> type VARNAME COMMA parameters .)


state 156

    (10) main_func -> VOID MAIN LPARENTH RPARENTH LBRACE func_block RBRACE SEMICOLON .

    $end            reduce using rule 10 (main_func -> VOID MAIN LPARENTH RPARENTH LBRACE func_block RBRACE SEMICOLON .)


state 157

    (58) statement -> VARNAME EQUAL calculation . SEMICOLON
    (31) assign_var -> VARNAME EQUAL calculation . SEMICOLON

    SEMICOLON       shift and go to state 175


state 158

    (28) return_statement -> RETURN var_value SEMICOLON .

    RBRACE          reduce using rule 28 (return_statement -> RETURN var_value SEMICOLON .)


state 159

    (15) if_statement -> IF LPARENTH condition . RPARENTH LBRACE func_block RBRACE else_block
    (16) if_statement -> IF LPARENTH condition . RPARENTH LBRACE func_block RBRACE

    RPARENTH        shift and go to state 176


state 160

    (18) condition -> var_value . comparator var_value
    (21) condition -> var_value . comparator VARNAME
    (86) comparator -> . GTHAN
    (87) comparator -> . LTHAN
    (88) comparator -> . LESS_EQUAL
    (89) comparator -> . DEQUAL
    (90) comparator -> . GREATER_EQUAL
    (91) comparator -> . NOT_EQUAL

    GTHAN           shift and go to state 178
    LTHAN           shift and go to state 179
    LESS_EQUAL      shift and go to state 180
    DEQUAL          shift and go to state 181
    GREATER_EQUAL   shift and go to state 182
    NOT_EQUAL       shift and go to state 183

    comparator                     shift and go to state 177

state 161

    (19) condition -> VARNAME . comparator VARNAME
    (20) condition -> VARNAME . comparator var_value
    (86) comparator -> . GTHAN
    (87) comparator -> . LTHAN
    (88) comparator -> . LESS_EQUAL
    (89) comparator -> . DEQUAL
    (90) comparator -> . GREATER_EQUAL
    (91) comparator -> . NOT_EQUAL

    GTHAN           shift and go to state 178
    LTHAN           shift and go to state 179
    LESS_EQUAL      shift and go to state 180
    DEQUAL          shift and go to state 181
    GREATER_EQUAL   shift and go to state 182
    NOT_EQUAL       shift and go to state 183

    comparator                     shift and go to state 184

state 162

    (22) while_statement -> WHILE LPARENTH condition . RPARENTH LBRACE func_block RBRACE

    RPARENTH        shift and go to state 185


state 163

    (23) for_statement -> FOR LPARENTH INT . VARNAME EQUAL INTVAR SEMICOLON VARNAME comparator INTVAR SEMICOLON VARNAME math_operator EQUAL INTVAR RPARENTH LBRACE func_block RBRACE

    VARNAME         shift and go to state 186


state 164

    (24) for_statement -> FOR LPARENTH SEMICOLON . SEMICOLON RPARENTH LBRACE func_block RBRACE

    SEMICOLON       shift and go to state 187


state 165

    (61) print_out -> COUT cout_expression_string SEMICOLON .

    RETURN          reduce using rule 61 (print_out -> COUT cout_expression_string SEMICOLON .)
    VARNAME         reduce using rule 61 (print_out -> COUT cout_expression_string SEMICOLON .)
    IF              reduce using rule 61 (print_out -> COUT cout_expression_string SEMICOLON .)
    WHILE           reduce using rule 61 (print_out -> COUT cout_expression_string SEMICOLON .)
    FOR             reduce using rule 61 (print_out -> COUT cout_expression_string SEMICOLON .)
    COUT            reduce using rule 61 (print_out -> COUT cout_expression_string SEMICOLON .)
    CIN             reduce using rule 61 (print_out -> COUT cout_expression_string SEMICOLON .)
    INT             reduce using rule 61 (print_out -> COUT cout_expression_string SEMICOLON .)
    FLOAT           reduce using rule 61 (print_out -> COUT cout_expression_string SEMICOLON .)
    CHAR            reduce using rule 61 (print_out -> COUT cout_expression_string SEMICOLON .)
    STRING          reduce using rule 61 (print_out -> COUT cout_expression_string SEMICOLON .)
    BOOL            reduce using rule 61 (print_out -> COUT cout_expression_string SEMICOLON .)
    RBRACE          reduce using rule 61 (print_out -> COUT cout_expression_string SEMICOLON .)


state 166

    (62) cout_expression_string -> cout_expression cout_expression_string .

    SEMICOLON       reduce using rule 62 (cout_expression_string -> cout_expression cout_expression_string .)


state 167

    (64) cout_expression -> LBIT printable .

    LBIT            reduce using rule 64 (cout_expression -> LBIT printable .)
    SEMICOLON       reduce using rule 64 (cout_expression -> LBIT printable .)


state 168

    (65) printable -> var_value .

    LBIT            reduce using rule 65 (printable -> var_value .)
    SEMICOLON       reduce using rule 65 (printable -> var_value .)


state 169

    (66) printable -> VARNAME .

    LBIT            reduce using rule 66 (printable -> VARNAME .)
    SEMICOLON       reduce using rule 66 (printable -> VARNAME .)


state 170

    (67) printable -> ENDL .

    LBIT            reduce using rule 67 (printable -> ENDL .)
    SEMICOLON       reduce using rule 67 (printable -> ENDL .)


state 171

    (68) printable -> STRINGVAR .
    (94) var_value -> STRINGVAR .

  ! reduce/reduce conflict for LBIT resolved using rule 68 (printable -> STRINGVAR .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 68 (printable -> STRINGVAR .)
    LBIT            reduce using rule 68 (printable -> STRINGVAR .)
    SEMICOLON       reduce using rule 68 (printable -> STRINGVAR .)

  ! LBIT            [ reduce using rule 94 (var_value -> STRINGVAR .) ]
  ! SEMICOLON       [ reduce using rule 94 (var_value -> STRINGVAR .) ]


state 172

    (76) cin_in -> CIN RBIT VARNAME . SEMICOLON

    SEMICOLON       shift and go to state 188


state 173

    (11) main_func -> INT MAIN LPARENTH RPARENTH LBRACE func_block RBRACE SEMICOLON .

    $end            reduce using rule 11 (main_func -> INT MAIN LPARENTH RPARENTH LBRACE func_block RBRACE SEMICOLON .)


state 174

    (44) function -> return_type VARNAME LPARENTH parameters RPARENTH LBRACE func_block RBRACE .

    CLASS           reduce using rule 44 (function -> return_type VARNAME LPARENTH parameters RPARENTH LBRACE func_block RBRACE .)
    VOID            reduce using rule 44 (function -> return_type VARNAME LPARENTH parameters RPARENTH LBRACE func_block RBRACE .)
    INT             reduce using rule 44 (function -> return_type VARNAME LPARENTH parameters RPARENTH LBRACE func_block RBRACE .)
    FLOAT           reduce using rule 44 (function -> return_type VARNAME LPARENTH parameters RPARENTH LBRACE func_block RBRACE .)
    CHAR            reduce using rule 44 (function -> return_type VARNAME LPARENTH parameters RPARENTH LBRACE func_block RBRACE .)
    STRING          reduce using rule 44 (function -> return_type VARNAME LPARENTH parameters RPARENTH LBRACE func_block RBRACE .)
    BOOL            reduce using rule 44 (function -> return_type VARNAME LPARENTH parameters RPARENTH LBRACE func_block RBRACE .)
    RBRACE          reduce using rule 44 (function -> return_type VARNAME LPARENTH parameters RPARENTH LBRACE func_block RBRACE .)
    PUBLIC          reduce using rule 44 (function -> return_type VARNAME LPARENTH parameters RPARENTH LBRACE func_block RBRACE .)
    PRIVATE         reduce using rule 44 (function -> return_type VARNAME LPARENTH parameters RPARENTH LBRACE func_block RBRACE .)
    PROTECTED       reduce using rule 44 (function -> return_type VARNAME LPARENTH parameters RPARENTH LBRACE func_block RBRACE .)


state 175

    (58) statement -> VARNAME EQUAL calculation SEMICOLON .
    (31) assign_var -> VARNAME EQUAL calculation SEMICOLON .

  ! reduce/reduce conflict for RETURN resolved using rule 31 (assign_var -> VARNAME EQUAL calculation SEMICOLON .)
  ! reduce/reduce conflict for VARNAME resolved using rule 31 (assign_var -> VARNAME EQUAL calculation SEMICOLON .)
  ! reduce/reduce conflict for IF resolved using rule 31 (assign_var -> VARNAME EQUAL calculation SEMICOLON .)
  ! reduce/reduce conflict for WHILE resolved using rule 31 (assign_var -> VARNAME EQUAL calculation SEMICOLON .)
  ! reduce/reduce conflict for FOR resolved using rule 31 (assign_var -> VARNAME EQUAL calculation SEMICOLON .)
  ! reduce/reduce conflict for COUT resolved using rule 31 (assign_var -> VARNAME EQUAL calculation SEMICOLON .)
  ! reduce/reduce conflict for CIN resolved using rule 31 (assign_var -> VARNAME EQUAL calculation SEMICOLON .)
  ! reduce/reduce conflict for INT resolved using rule 31 (assign_var -> VARNAME EQUAL calculation SEMICOLON .)
  ! reduce/reduce conflict for FLOAT resolved using rule 31 (assign_var -> VARNAME EQUAL calculation SEMICOLON .)
  ! reduce/reduce conflict for CHAR resolved using rule 31 (assign_var -> VARNAME EQUAL calculation SEMICOLON .)
  ! reduce/reduce conflict for STRING resolved using rule 31 (assign_var -> VARNAME EQUAL calculation SEMICOLON .)
  ! reduce/reduce conflict for BOOL resolved using rule 31 (assign_var -> VARNAME EQUAL calculation SEMICOLON .)
  ! reduce/reduce conflict for RBRACE resolved using rule 31 (assign_var -> VARNAME EQUAL calculation SEMICOLON .)
    RETURN          reduce using rule 31 (assign_var -> VARNAME EQUAL calculation SEMICOLON .)
    VARNAME         reduce using rule 31 (assign_var -> VARNAME EQUAL calculation SEMICOLON .)
    IF              reduce using rule 31 (assign_var -> VARNAME EQUAL calculation SEMICOLON .)
    WHILE           reduce using rule 31 (assign_var -> VARNAME EQUAL calculation SEMICOLON .)
    FOR             reduce using rule 31 (assign_var -> VARNAME EQUAL calculation SEMICOLON .)
    COUT            reduce using rule 31 (assign_var -> VARNAME EQUAL calculation SEMICOLON .)
    CIN             reduce using rule 31 (assign_var -> VARNAME EQUAL calculation SEMICOLON .)
    INT             reduce using rule 31 (assign_var -> VARNAME EQUAL calculation SEMICOLON .)
    FLOAT           reduce using rule 31 (assign_var -> VARNAME EQUAL calculation SEMICOLON .)
    CHAR            reduce using rule 31 (assign_var -> VARNAME EQUAL calculation SEMICOLON .)
    STRING          reduce using rule 31 (assign_var -> VARNAME EQUAL calculation SEMICOLON .)
    BOOL            reduce using rule 31 (assign_var -> VARNAME EQUAL calculation SEMICOLON .)
    RBRACE          reduce using rule 31 (assign_var -> VARNAME EQUAL calculation SEMICOLON .)

  ! RETURN          [ reduce using rule 58 (statement -> VARNAME EQUAL calculation SEMICOLON .) ]
  ! VARNAME         [ reduce using rule 58 (statement -> VARNAME EQUAL calculation SEMICOLON .) ]
  ! IF              [ reduce using rule 58 (statement -> VARNAME EQUAL calculation SEMICOLON .) ]
  ! WHILE           [ reduce using rule 58 (statement -> VARNAME EQUAL calculation SEMICOLON .) ]
  ! FOR             [ reduce using rule 58 (statement -> VARNAME EQUAL calculation SEMICOLON .) ]
  ! COUT            [ reduce using rule 58 (statement -> VARNAME EQUAL calculation SEMICOLON .) ]
  ! CIN             [ reduce using rule 58 (statement -> VARNAME EQUAL calculation SEMICOLON .) ]
  ! INT             [ reduce using rule 58 (statement -> VARNAME EQUAL calculation SEMICOLON .) ]
  ! FLOAT           [ reduce using rule 58 (statement -> VARNAME EQUAL calculation SEMICOLON .) ]
  ! CHAR            [ reduce using rule 58 (statement -> VARNAME EQUAL calculation SEMICOLON .) ]
  ! STRING          [ reduce using rule 58 (statement -> VARNAME EQUAL calculation SEMICOLON .) ]
  ! BOOL            [ reduce using rule 58 (statement -> VARNAME EQUAL calculation SEMICOLON .) ]
  ! RBRACE          [ reduce using rule 58 (statement -> VARNAME EQUAL calculation SEMICOLON .) ]


state 176

    (15) if_statement -> IF LPARENTH condition RPARENTH . LBRACE func_block RBRACE else_block
    (16) if_statement -> IF LPARENTH condition RPARENTH . LBRACE func_block RBRACE

    LBRACE          shift and go to state 189


state 177

    (18) condition -> var_value comparator . var_value
    (21) condition -> var_value comparator . VARNAME
    (92) var_value -> . INTVAR
    (93) var_value -> . FLOATVAR
    (94) var_value -> . STRINGVAR
    (95) var_value -> . bool_value
    (96) bool_value -> . TRUE
    (97) bool_value -> . FALSE

    VARNAME         shift and go to state 191
    INTVAR          shift and go to state 138
    FLOATVAR        shift and go to state 139
    STRINGVAR       shift and go to state 66
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70

    var_value                      shift and go to state 190
    bool_value                     shift and go to state 67

state 178

    (86) comparator -> GTHAN .

    VARNAME         reduce using rule 86 (comparator -> GTHAN .)
    INTVAR          reduce using rule 86 (comparator -> GTHAN .)
    FLOATVAR        reduce using rule 86 (comparator -> GTHAN .)
    STRINGVAR       reduce using rule 86 (comparator -> GTHAN .)
    TRUE            reduce using rule 86 (comparator -> GTHAN .)
    FALSE           reduce using rule 86 (comparator -> GTHAN .)


state 179

    (87) comparator -> LTHAN .

    VARNAME         reduce using rule 87 (comparator -> LTHAN .)
    INTVAR          reduce using rule 87 (comparator -> LTHAN .)
    FLOATVAR        reduce using rule 87 (comparator -> LTHAN .)
    STRINGVAR       reduce using rule 87 (comparator -> LTHAN .)
    TRUE            reduce using rule 87 (comparator -> LTHAN .)
    FALSE           reduce using rule 87 (comparator -> LTHAN .)


state 180

    (88) comparator -> LESS_EQUAL .

    VARNAME         reduce using rule 88 (comparator -> LESS_EQUAL .)
    INTVAR          reduce using rule 88 (comparator -> LESS_EQUAL .)
    FLOATVAR        reduce using rule 88 (comparator -> LESS_EQUAL .)
    STRINGVAR       reduce using rule 88 (comparator -> LESS_EQUAL .)
    TRUE            reduce using rule 88 (comparator -> LESS_EQUAL .)
    FALSE           reduce using rule 88 (comparator -> LESS_EQUAL .)


state 181

    (89) comparator -> DEQUAL .

    VARNAME         reduce using rule 89 (comparator -> DEQUAL .)
    INTVAR          reduce using rule 89 (comparator -> DEQUAL .)
    FLOATVAR        reduce using rule 89 (comparator -> DEQUAL .)
    STRINGVAR       reduce using rule 89 (comparator -> DEQUAL .)
    TRUE            reduce using rule 89 (comparator -> DEQUAL .)
    FALSE           reduce using rule 89 (comparator -> DEQUAL .)


state 182

    (90) comparator -> GREATER_EQUAL .

    VARNAME         reduce using rule 90 (comparator -> GREATER_EQUAL .)
    INTVAR          reduce using rule 90 (comparator -> GREATER_EQUAL .)
    FLOATVAR        reduce using rule 90 (comparator -> GREATER_EQUAL .)
    STRINGVAR       reduce using rule 90 (comparator -> GREATER_EQUAL .)
    TRUE            reduce using rule 90 (comparator -> GREATER_EQUAL .)
    FALSE           reduce using rule 90 (comparator -> GREATER_EQUAL .)


state 183

    (91) comparator -> NOT_EQUAL .

    VARNAME         reduce using rule 91 (comparator -> NOT_EQUAL .)
    INTVAR          reduce using rule 91 (comparator -> NOT_EQUAL .)
    FLOATVAR        reduce using rule 91 (comparator -> NOT_EQUAL .)
    STRINGVAR       reduce using rule 91 (comparator -> NOT_EQUAL .)
    TRUE            reduce using rule 91 (comparator -> NOT_EQUAL .)
    FALSE           reduce using rule 91 (comparator -> NOT_EQUAL .)


state 184

    (19) condition -> VARNAME comparator . VARNAME
    (20) condition -> VARNAME comparator . var_value
    (92) var_value -> . INTVAR
    (93) var_value -> . FLOATVAR
    (94) var_value -> . STRINGVAR
    (95) var_value -> . bool_value
    (96) bool_value -> . TRUE
    (97) bool_value -> . FALSE

    VARNAME         shift and go to state 192
    INTVAR          shift and go to state 138
    FLOATVAR        shift and go to state 139
    STRINGVAR       shift and go to state 66
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70

    var_value                      shift and go to state 193
    bool_value                     shift and go to state 67

state 185

    (22) while_statement -> WHILE LPARENTH condition RPARENTH . LBRACE func_block RBRACE

    LBRACE          shift and go to state 194


state 186

    (23) for_statement -> FOR LPARENTH INT VARNAME . EQUAL INTVAR SEMICOLON VARNAME comparator INTVAR SEMICOLON VARNAME math_operator EQUAL INTVAR RPARENTH LBRACE func_block RBRACE

    EQUAL           shift and go to state 195


state 187

    (24) for_statement -> FOR LPARENTH SEMICOLON SEMICOLON . RPARENTH LBRACE func_block RBRACE

    RPARENTH        shift and go to state 196


state 188

    (76) cin_in -> CIN RBIT VARNAME SEMICOLON .

    RETURN          reduce using rule 76 (cin_in -> CIN RBIT VARNAME SEMICOLON .)
    VARNAME         reduce using rule 76 (cin_in -> CIN RBIT VARNAME SEMICOLON .)
    IF              reduce using rule 76 (cin_in -> CIN RBIT VARNAME SEMICOLON .)
    WHILE           reduce using rule 76 (cin_in -> CIN RBIT VARNAME SEMICOLON .)
    FOR             reduce using rule 76 (cin_in -> CIN RBIT VARNAME SEMICOLON .)
    COUT            reduce using rule 76 (cin_in -> CIN RBIT VARNAME SEMICOLON .)
    CIN             reduce using rule 76 (cin_in -> CIN RBIT VARNAME SEMICOLON .)
    INT             reduce using rule 76 (cin_in -> CIN RBIT VARNAME SEMICOLON .)
    FLOAT           reduce using rule 76 (cin_in -> CIN RBIT VARNAME SEMICOLON .)
    CHAR            reduce using rule 76 (cin_in -> CIN RBIT VARNAME SEMICOLON .)
    STRING          reduce using rule 76 (cin_in -> CIN RBIT VARNAME SEMICOLON .)
    BOOL            reduce using rule 76 (cin_in -> CIN RBIT VARNAME SEMICOLON .)
    RBRACE          reduce using rule 76 (cin_in -> CIN RBIT VARNAME SEMICOLON .)


state 189

    (15) if_statement -> IF LPARENTH condition RPARENTH LBRACE . func_block RBRACE else_block
    (16) if_statement -> IF LPARENTH condition RPARENTH LBRACE . func_block RBRACE
    (49) func_block -> . statement
    (50) func_block -> . statement return_statement
    (51) func_block -> . return_statement
    (52) statement -> . variable_def
    (53) statement -> . if_statement
    (54) statement -> . while_statement
    (55) statement -> . for_statement
    (56) statement -> . print_out
    (57) statement -> . cin_in
    (58) statement -> . VARNAME EQUAL calculation SEMICOLON
    (59) statement -> . assign_var
    (60) statement -> . statement statement
    (28) return_statement -> . RETURN var_value SEMICOLON
    (29) return_statement -> . RETURN SEMICOLON
    (32) variable_def -> . declare_var
    (33) variable_def -> . declare_assign_var
    (15) if_statement -> . IF LPARENTH condition RPARENTH LBRACE func_block RBRACE else_block
    (16) if_statement -> . IF LPARENTH condition RPARENTH LBRACE func_block RBRACE
    (22) while_statement -> . WHILE LPARENTH condition RPARENTH LBRACE func_block RBRACE
    (23) for_statement -> . FOR LPARENTH INT VARNAME EQUAL INTVAR SEMICOLON VARNAME comparator INTVAR SEMICOLON VARNAME math_operator EQUAL INTVAR RPARENTH LBRACE func_block RBRACE
    (24) for_statement -> . FOR LPARENTH SEMICOLON SEMICOLON RPARENTH LBRACE func_block RBRACE
    (61) print_out -> . COUT cout_expression_string SEMICOLON
    (76) cin_in -> . CIN RBIT VARNAME SEMICOLON
    (30) assign_var -> . VARNAME EQUAL var_value SEMICOLON
    (31) assign_var -> . VARNAME EQUAL calculation SEMICOLON
    (36) declare_var -> . type VARNAME SEMICOLON
    (34) declare_assign_var -> . type VARNAME EQUAL var_value SEMICOLON
    (35) declare_assign_var -> . type VARNAME EQUAL calculation SEMICOLON
    (71) type -> . INT
    (72) type -> . FLOAT
    (73) type -> . CHAR
    (74) type -> . STRING
    (75) type -> . BOOL

    VARNAME         shift and go to state 105
    RETURN          shift and go to state 107
    IF              shift and go to state 108
    WHILE           shift and go to state 109
    FOR             shift and go to state 110
    COUT            shift and go to state 111
    CIN             shift and go to state 112
    INT             shift and go to state 29
    FLOAT           shift and go to state 20
    CHAR            shift and go to state 21
    STRING          shift and go to state 22
    BOOL            shift and go to state 23

    func_block                     shift and go to state 197
    statement                      shift and go to state 97
    return_statement               shift and go to state 98
    variable_def                   shift and go to state 99
    if_statement                   shift and go to state 100
    while_statement                shift and go to state 101
    for_statement                  shift and go to state 102
    print_out                      shift and go to state 103
    cin_in                         shift and go to state 104
    assign_var                     shift and go to state 106
    declare_var                    shift and go to state 15
    declare_assign_var             shift and go to state 16
    type                           shift and go to state 113

state 190

    (18) condition -> var_value comparator var_value .

    RPARENTH        reduce using rule 18 (condition -> var_value comparator var_value .)


state 191

    (21) condition -> var_value comparator VARNAME .

    RPARENTH        reduce using rule 21 (condition -> var_value comparator VARNAME .)


state 192

    (19) condition -> VARNAME comparator VARNAME .

    RPARENTH        reduce using rule 19 (condition -> VARNAME comparator VARNAME .)


state 193

    (20) condition -> VARNAME comparator var_value .

    RPARENTH        reduce using rule 20 (condition -> VARNAME comparator var_value .)


state 194

    (22) while_statement -> WHILE LPARENTH condition RPARENTH LBRACE . func_block RBRACE
    (49) func_block -> . statement
    (50) func_block -> . statement return_statement
    (51) func_block -> . return_statement
    (52) statement -> . variable_def
    (53) statement -> . if_statement
    (54) statement -> . while_statement
    (55) statement -> . for_statement
    (56) statement -> . print_out
    (57) statement -> . cin_in
    (58) statement -> . VARNAME EQUAL calculation SEMICOLON
    (59) statement -> . assign_var
    (60) statement -> . statement statement
    (28) return_statement -> . RETURN var_value SEMICOLON
    (29) return_statement -> . RETURN SEMICOLON
    (32) variable_def -> . declare_var
    (33) variable_def -> . declare_assign_var
    (15) if_statement -> . IF LPARENTH condition RPARENTH LBRACE func_block RBRACE else_block
    (16) if_statement -> . IF LPARENTH condition RPARENTH LBRACE func_block RBRACE
    (22) while_statement -> . WHILE LPARENTH condition RPARENTH LBRACE func_block RBRACE
    (23) for_statement -> . FOR LPARENTH INT VARNAME EQUAL INTVAR SEMICOLON VARNAME comparator INTVAR SEMICOLON VARNAME math_operator EQUAL INTVAR RPARENTH LBRACE func_block RBRACE
    (24) for_statement -> . FOR LPARENTH SEMICOLON SEMICOLON RPARENTH LBRACE func_block RBRACE
    (61) print_out -> . COUT cout_expression_string SEMICOLON
    (76) cin_in -> . CIN RBIT VARNAME SEMICOLON
    (30) assign_var -> . VARNAME EQUAL var_value SEMICOLON
    (31) assign_var -> . VARNAME EQUAL calculation SEMICOLON
    (36) declare_var -> . type VARNAME SEMICOLON
    (34) declare_assign_var -> . type VARNAME EQUAL var_value SEMICOLON
    (35) declare_assign_var -> . type VARNAME EQUAL calculation SEMICOLON
    (71) type -> . INT
    (72) type -> . FLOAT
    (73) type -> . CHAR
    (74) type -> . STRING
    (75) type -> . BOOL

    VARNAME         shift and go to state 105
    RETURN          shift and go to state 107
    IF              shift and go to state 108
    WHILE           shift and go to state 109
    FOR             shift and go to state 110
    COUT            shift and go to state 111
    CIN             shift and go to state 112
    INT             shift and go to state 29
    FLOAT           shift and go to state 20
    CHAR            shift and go to state 21
    STRING          shift and go to state 22
    BOOL            shift and go to state 23

    func_block                     shift and go to state 198
    statement                      shift and go to state 97
    return_statement               shift and go to state 98
    variable_def                   shift and go to state 99
    if_statement                   shift and go to state 100
    while_statement                shift and go to state 101
    for_statement                  shift and go to state 102
    print_out                      shift and go to state 103
    cin_in                         shift and go to state 104
    assign_var                     shift and go to state 106
    declare_var                    shift and go to state 15
    declare_assign_var             shift and go to state 16
    type                           shift and go to state 113

state 195

    (23) for_statement -> FOR LPARENTH INT VARNAME EQUAL . INTVAR SEMICOLON VARNAME comparator INTVAR SEMICOLON VARNAME math_operator EQUAL INTVAR RPARENTH LBRACE func_block RBRACE

    INTVAR          shift and go to state 199


state 196

    (24) for_statement -> FOR LPARENTH SEMICOLON SEMICOLON RPARENTH . LBRACE func_block RBRACE

    LBRACE          shift and go to state 200


state 197

    (15) if_statement -> IF LPARENTH condition RPARENTH LBRACE func_block . RBRACE else_block
    (16) if_statement -> IF LPARENTH condition RPARENTH LBRACE func_block . RBRACE

    RBRACE          shift and go to state 201


state 198

    (22) while_statement -> WHILE LPARENTH condition RPARENTH LBRACE func_block . RBRACE

    RBRACE          shift and go to state 202


state 199

    (23) for_statement -> FOR LPARENTH INT VARNAME EQUAL INTVAR . SEMICOLON VARNAME comparator INTVAR SEMICOLON VARNAME math_operator EQUAL INTVAR RPARENTH LBRACE func_block RBRACE

    SEMICOLON       shift and go to state 203


state 200

    (24) for_statement -> FOR LPARENTH SEMICOLON SEMICOLON RPARENTH LBRACE . func_block RBRACE
    (49) func_block -> . statement
    (50) func_block -> . statement return_statement
    (51) func_block -> . return_statement
    (52) statement -> . variable_def
    (53) statement -> . if_statement
    (54) statement -> . while_statement
    (55) statement -> . for_statement
    (56) statement -> . print_out
    (57) statement -> . cin_in
    (58) statement -> . VARNAME EQUAL calculation SEMICOLON
    (59) statement -> . assign_var
    (60) statement -> . statement statement
    (28) return_statement -> . RETURN var_value SEMICOLON
    (29) return_statement -> . RETURN SEMICOLON
    (32) variable_def -> . declare_var
    (33) variable_def -> . declare_assign_var
    (15) if_statement -> . IF LPARENTH condition RPARENTH LBRACE func_block RBRACE else_block
    (16) if_statement -> . IF LPARENTH condition RPARENTH LBRACE func_block RBRACE
    (22) while_statement -> . WHILE LPARENTH condition RPARENTH LBRACE func_block RBRACE
    (23) for_statement -> . FOR LPARENTH INT VARNAME EQUAL INTVAR SEMICOLON VARNAME comparator INTVAR SEMICOLON VARNAME math_operator EQUAL INTVAR RPARENTH LBRACE func_block RBRACE
    (24) for_statement -> . FOR LPARENTH SEMICOLON SEMICOLON RPARENTH LBRACE func_block RBRACE
    (61) print_out -> . COUT cout_expression_string SEMICOLON
    (76) cin_in -> . CIN RBIT VARNAME SEMICOLON
    (30) assign_var -> . VARNAME EQUAL var_value SEMICOLON
    (31) assign_var -> . VARNAME EQUAL calculation SEMICOLON
    (36) declare_var -> . type VARNAME SEMICOLON
    (34) declare_assign_var -> . type VARNAME EQUAL var_value SEMICOLON
    (35) declare_assign_var -> . type VARNAME EQUAL calculation SEMICOLON
    (71) type -> . INT
    (72) type -> . FLOAT
    (73) type -> . CHAR
    (74) type -> . STRING
    (75) type -> . BOOL

    VARNAME         shift and go to state 105
    RETURN          shift and go to state 107
    IF              shift and go to state 108
    WHILE           shift and go to state 109
    FOR             shift and go to state 110
    COUT            shift and go to state 111
    CIN             shift and go to state 112
    INT             shift and go to state 29
    FLOAT           shift and go to state 20
    CHAR            shift and go to state 21
    STRING          shift and go to state 22
    BOOL            shift and go to state 23

    func_block                     shift and go to state 204
    statement                      shift and go to state 97
    return_statement               shift and go to state 98
    variable_def                   shift and go to state 99
    if_statement                   shift and go to state 100
    while_statement                shift and go to state 101
    for_statement                  shift and go to state 102
    print_out                      shift and go to state 103
    cin_in                         shift and go to state 104
    assign_var                     shift and go to state 106
    declare_var                    shift and go to state 15
    declare_assign_var             shift and go to state 16
    type                           shift and go to state 113

state 201

    (15) if_statement -> IF LPARENTH condition RPARENTH LBRACE func_block RBRACE . else_block
    (16) if_statement -> IF LPARENTH condition RPARENTH LBRACE func_block RBRACE .
    (17) else_block -> . ELSE LBRACE func_block RBRACE

    RETURN          reduce using rule 16 (if_statement -> IF LPARENTH condition RPARENTH LBRACE func_block RBRACE .)
    VARNAME         reduce using rule 16 (if_statement -> IF LPARENTH condition RPARENTH LBRACE func_block RBRACE .)
    IF              reduce using rule 16 (if_statement -> IF LPARENTH condition RPARENTH LBRACE func_block RBRACE .)
    WHILE           reduce using rule 16 (if_statement -> IF LPARENTH condition RPARENTH LBRACE func_block RBRACE .)
    FOR             reduce using rule 16 (if_statement -> IF LPARENTH condition RPARENTH LBRACE func_block RBRACE .)
    COUT            reduce using rule 16 (if_statement -> IF LPARENTH condition RPARENTH LBRACE func_block RBRACE .)
    CIN             reduce using rule 16 (if_statement -> IF LPARENTH condition RPARENTH LBRACE func_block RBRACE .)
    INT             reduce using rule 16 (if_statement -> IF LPARENTH condition RPARENTH LBRACE func_block RBRACE .)
    FLOAT           reduce using rule 16 (if_statement -> IF LPARENTH condition RPARENTH LBRACE func_block RBRACE .)
    CHAR            reduce using rule 16 (if_statement -> IF LPARENTH condition RPARENTH LBRACE func_block RBRACE .)
    STRING          reduce using rule 16 (if_statement -> IF LPARENTH condition RPARENTH LBRACE func_block RBRACE .)
    BOOL            reduce using rule 16 (if_statement -> IF LPARENTH condition RPARENTH LBRACE func_block RBRACE .)
    RBRACE          reduce using rule 16 (if_statement -> IF LPARENTH condition RPARENTH LBRACE func_block RBRACE .)
    ELSE            shift and go to state 206

    else_block                     shift and go to state 205

state 202

    (22) while_statement -> WHILE LPARENTH condition RPARENTH LBRACE func_block RBRACE .

    RETURN          reduce using rule 22 (while_statement -> WHILE LPARENTH condition RPARENTH LBRACE func_block RBRACE .)
    VARNAME         reduce using rule 22 (while_statement -> WHILE LPARENTH condition RPARENTH LBRACE func_block RBRACE .)
    IF              reduce using rule 22 (while_statement -> WHILE LPARENTH condition RPARENTH LBRACE func_block RBRACE .)
    WHILE           reduce using rule 22 (while_statement -> WHILE LPARENTH condition RPARENTH LBRACE func_block RBRACE .)
    FOR             reduce using rule 22 (while_statement -> WHILE LPARENTH condition RPARENTH LBRACE func_block RBRACE .)
    COUT            reduce using rule 22 (while_statement -> WHILE LPARENTH condition RPARENTH LBRACE func_block RBRACE .)
    CIN             reduce using rule 22 (while_statement -> WHILE LPARENTH condition RPARENTH LBRACE func_block RBRACE .)
    INT             reduce using rule 22 (while_statement -> WHILE LPARENTH condition RPARENTH LBRACE func_block RBRACE .)
    FLOAT           reduce using rule 22 (while_statement -> WHILE LPARENTH condition RPARENTH LBRACE func_block RBRACE .)
    CHAR            reduce using rule 22 (while_statement -> WHILE LPARENTH condition RPARENTH LBRACE func_block RBRACE .)
    STRING          reduce using rule 22 (while_statement -> WHILE LPARENTH condition RPARENTH LBRACE func_block RBRACE .)
    BOOL            reduce using rule 22 (while_statement -> WHILE LPARENTH condition RPARENTH LBRACE func_block RBRACE .)
    RBRACE          reduce using rule 22 (while_statement -> WHILE LPARENTH condition RPARENTH LBRACE func_block RBRACE .)


state 203

    (23) for_statement -> FOR LPARENTH INT VARNAME EQUAL INTVAR SEMICOLON . VARNAME comparator INTVAR SEMICOLON VARNAME math_operator EQUAL INTVAR RPARENTH LBRACE func_block RBRACE

    VARNAME         shift and go to state 207


state 204

    (24) for_statement -> FOR LPARENTH SEMICOLON SEMICOLON RPARENTH LBRACE func_block . RBRACE

    RBRACE          shift and go to state 208


state 205

    (15) if_statement -> IF LPARENTH condition RPARENTH LBRACE func_block RBRACE else_block .

    RETURN          reduce using rule 15 (if_statement -> IF LPARENTH condition RPARENTH LBRACE func_block RBRACE else_block .)
    VARNAME         reduce using rule 15 (if_statement -> IF LPARENTH condition RPARENTH LBRACE func_block RBRACE else_block .)
    IF              reduce using rule 15 (if_statement -> IF LPARENTH condition RPARENTH LBRACE func_block RBRACE else_block .)
    WHILE           reduce using rule 15 (if_statement -> IF LPARENTH condition RPARENTH LBRACE func_block RBRACE else_block .)
    FOR             reduce using rule 15 (if_statement -> IF LPARENTH condition RPARENTH LBRACE func_block RBRACE else_block .)
    COUT            reduce using rule 15 (if_statement -> IF LPARENTH condition RPARENTH LBRACE func_block RBRACE else_block .)
    CIN             reduce using rule 15 (if_statement -> IF LPARENTH condition RPARENTH LBRACE func_block RBRACE else_block .)
    INT             reduce using rule 15 (if_statement -> IF LPARENTH condition RPARENTH LBRACE func_block RBRACE else_block .)
    FLOAT           reduce using rule 15 (if_statement -> IF LPARENTH condition RPARENTH LBRACE func_block RBRACE else_block .)
    CHAR            reduce using rule 15 (if_statement -> IF LPARENTH condition RPARENTH LBRACE func_block RBRACE else_block .)
    STRING          reduce using rule 15 (if_statement -> IF LPARENTH condition RPARENTH LBRACE func_block RBRACE else_block .)
    BOOL            reduce using rule 15 (if_statement -> IF LPARENTH condition RPARENTH LBRACE func_block RBRACE else_block .)
    RBRACE          reduce using rule 15 (if_statement -> IF LPARENTH condition RPARENTH LBRACE func_block RBRACE else_block .)


state 206

    (17) else_block -> ELSE . LBRACE func_block RBRACE

    LBRACE          shift and go to state 209


state 207

    (23) for_statement -> FOR LPARENTH INT VARNAME EQUAL INTVAR SEMICOLON VARNAME . comparator INTVAR SEMICOLON VARNAME math_operator EQUAL INTVAR RPARENTH LBRACE func_block RBRACE
    (86) comparator -> . GTHAN
    (87) comparator -> . LTHAN
    (88) comparator -> . LESS_EQUAL
    (89) comparator -> . DEQUAL
    (90) comparator -> . GREATER_EQUAL
    (91) comparator -> . NOT_EQUAL

    GTHAN           shift and go to state 178
    LTHAN           shift and go to state 179
    LESS_EQUAL      shift and go to state 180
    DEQUAL          shift and go to state 181
    GREATER_EQUAL   shift and go to state 182
    NOT_EQUAL       shift and go to state 183

    comparator                     shift and go to state 210

state 208

    (24) for_statement -> FOR LPARENTH SEMICOLON SEMICOLON RPARENTH LBRACE func_block RBRACE .

    RETURN          reduce using rule 24 (for_statement -> FOR LPARENTH SEMICOLON SEMICOLON RPARENTH LBRACE func_block RBRACE .)
    VARNAME         reduce using rule 24 (for_statement -> FOR LPARENTH SEMICOLON SEMICOLON RPARENTH LBRACE func_block RBRACE .)
    IF              reduce using rule 24 (for_statement -> FOR LPARENTH SEMICOLON SEMICOLON RPARENTH LBRACE func_block RBRACE .)
    WHILE           reduce using rule 24 (for_statement -> FOR LPARENTH SEMICOLON SEMICOLON RPARENTH LBRACE func_block RBRACE .)
    FOR             reduce using rule 24 (for_statement -> FOR LPARENTH SEMICOLON SEMICOLON RPARENTH LBRACE func_block RBRACE .)
    COUT            reduce using rule 24 (for_statement -> FOR LPARENTH SEMICOLON SEMICOLON RPARENTH LBRACE func_block RBRACE .)
    CIN             reduce using rule 24 (for_statement -> FOR LPARENTH SEMICOLON SEMICOLON RPARENTH LBRACE func_block RBRACE .)
    INT             reduce using rule 24 (for_statement -> FOR LPARENTH SEMICOLON SEMICOLON RPARENTH LBRACE func_block RBRACE .)
    FLOAT           reduce using rule 24 (for_statement -> FOR LPARENTH SEMICOLON SEMICOLON RPARENTH LBRACE func_block RBRACE .)
    CHAR            reduce using rule 24 (for_statement -> FOR LPARENTH SEMICOLON SEMICOLON RPARENTH LBRACE func_block RBRACE .)
    STRING          reduce using rule 24 (for_statement -> FOR LPARENTH SEMICOLON SEMICOLON RPARENTH LBRACE func_block RBRACE .)
    BOOL            reduce using rule 24 (for_statement -> FOR LPARENTH SEMICOLON SEMICOLON RPARENTH LBRACE func_block RBRACE .)
    RBRACE          reduce using rule 24 (for_statement -> FOR LPARENTH SEMICOLON SEMICOLON RPARENTH LBRACE func_block RBRACE .)


state 209

    (17) else_block -> ELSE LBRACE . func_block RBRACE
    (49) func_block -> . statement
    (50) func_block -> . statement return_statement
    (51) func_block -> . return_statement
    (52) statement -> . variable_def
    (53) statement -> . if_statement
    (54) statement -> . while_statement
    (55) statement -> . for_statement
    (56) statement -> . print_out
    (57) statement -> . cin_in
    (58) statement -> . VARNAME EQUAL calculation SEMICOLON
    (59) statement -> . assign_var
    (60) statement -> . statement statement
    (28) return_statement -> . RETURN var_value SEMICOLON
    (29) return_statement -> . RETURN SEMICOLON
    (32) variable_def -> . declare_var
    (33) variable_def -> . declare_assign_var
    (15) if_statement -> . IF LPARENTH condition RPARENTH LBRACE func_block RBRACE else_block
    (16) if_statement -> . IF LPARENTH condition RPARENTH LBRACE func_block RBRACE
    (22) while_statement -> . WHILE LPARENTH condition RPARENTH LBRACE func_block RBRACE
    (23) for_statement -> . FOR LPARENTH INT VARNAME EQUAL INTVAR SEMICOLON VARNAME comparator INTVAR SEMICOLON VARNAME math_operator EQUAL INTVAR RPARENTH LBRACE func_block RBRACE
    (24) for_statement -> . FOR LPARENTH SEMICOLON SEMICOLON RPARENTH LBRACE func_block RBRACE
    (61) print_out -> . COUT cout_expression_string SEMICOLON
    (76) cin_in -> . CIN RBIT VARNAME SEMICOLON
    (30) assign_var -> . VARNAME EQUAL var_value SEMICOLON
    (31) assign_var -> . VARNAME EQUAL calculation SEMICOLON
    (36) declare_var -> . type VARNAME SEMICOLON
    (34) declare_assign_var -> . type VARNAME EQUAL var_value SEMICOLON
    (35) declare_assign_var -> . type VARNAME EQUAL calculation SEMICOLON
    (71) type -> . INT
    (72) type -> . FLOAT
    (73) type -> . CHAR
    (74) type -> . STRING
    (75) type -> . BOOL

    VARNAME         shift and go to state 105
    RETURN          shift and go to state 107
    IF              shift and go to state 108
    WHILE           shift and go to state 109
    FOR             shift and go to state 110
    COUT            shift and go to state 111
    CIN             shift and go to state 112
    INT             shift and go to state 29
    FLOAT           shift and go to state 20
    CHAR            shift and go to state 21
    STRING          shift and go to state 22
    BOOL            shift and go to state 23

    func_block                     shift and go to state 211
    statement                      shift and go to state 97
    return_statement               shift and go to state 98
    variable_def                   shift and go to state 99
    if_statement                   shift and go to state 100
    while_statement                shift and go to state 101
    for_statement                  shift and go to state 102
    print_out                      shift and go to state 103
    cin_in                         shift and go to state 104
    assign_var                     shift and go to state 106
    declare_var                    shift and go to state 15
    declare_assign_var             shift and go to state 16
    type                           shift and go to state 113

state 210

    (23) for_statement -> FOR LPARENTH INT VARNAME EQUAL INTVAR SEMICOLON VARNAME comparator . INTVAR SEMICOLON VARNAME math_operator EQUAL INTVAR RPARENTH LBRACE func_block RBRACE

    INTVAR          shift and go to state 212


state 211

    (17) else_block -> ELSE LBRACE func_block . RBRACE

    RBRACE          shift and go to state 213


state 212

    (23) for_statement -> FOR LPARENTH INT VARNAME EQUAL INTVAR SEMICOLON VARNAME comparator INTVAR . SEMICOLON VARNAME math_operator EQUAL INTVAR RPARENTH LBRACE func_block RBRACE

    SEMICOLON       shift and go to state 214


state 213

    (17) else_block -> ELSE LBRACE func_block RBRACE .

    RETURN          reduce using rule 17 (else_block -> ELSE LBRACE func_block RBRACE .)
    VARNAME         reduce using rule 17 (else_block -> ELSE LBRACE func_block RBRACE .)
    IF              reduce using rule 17 (else_block -> ELSE LBRACE func_block RBRACE .)
    WHILE           reduce using rule 17 (else_block -> ELSE LBRACE func_block RBRACE .)
    FOR             reduce using rule 17 (else_block -> ELSE LBRACE func_block RBRACE .)
    COUT            reduce using rule 17 (else_block -> ELSE LBRACE func_block RBRACE .)
    CIN             reduce using rule 17 (else_block -> ELSE LBRACE func_block RBRACE .)
    INT             reduce using rule 17 (else_block -> ELSE LBRACE func_block RBRACE .)
    FLOAT           reduce using rule 17 (else_block -> ELSE LBRACE func_block RBRACE .)
    CHAR            reduce using rule 17 (else_block -> ELSE LBRACE func_block RBRACE .)
    STRING          reduce using rule 17 (else_block -> ELSE LBRACE func_block RBRACE .)
    BOOL            reduce using rule 17 (else_block -> ELSE LBRACE func_block RBRACE .)
    RBRACE          reduce using rule 17 (else_block -> ELSE LBRACE func_block RBRACE .)


state 214

    (23) for_statement -> FOR LPARENTH INT VARNAME EQUAL INTVAR SEMICOLON VARNAME comparator INTVAR SEMICOLON . VARNAME math_operator EQUAL INTVAR RPARENTH LBRACE func_block RBRACE

    VARNAME         shift and go to state 215


state 215

    (23) for_statement -> FOR LPARENTH INT VARNAME EQUAL INTVAR SEMICOLON VARNAME comparator INTVAR SEMICOLON VARNAME . math_operator EQUAL INTVAR RPARENTH LBRACE func_block RBRACE
    (81) math_operator -> . PLUS
    (82) math_operator -> . MINUS
    (83) math_operator -> . MUL
    (84) math_operator -> . DIV
    (85) math_operator -> . MOD

    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    MUL             shift and go to state 93
    DIV             shift and go to state 94
    MOD             shift and go to state 95

    math_operator                  shift and go to state 216

state 216

    (23) for_statement -> FOR LPARENTH INT VARNAME EQUAL INTVAR SEMICOLON VARNAME comparator INTVAR SEMICOLON VARNAME math_operator . EQUAL INTVAR RPARENTH LBRACE func_block RBRACE

    EQUAL           shift and go to state 217


state 217

    (23) for_statement -> FOR LPARENTH INT VARNAME EQUAL INTVAR SEMICOLON VARNAME comparator INTVAR SEMICOLON VARNAME math_operator EQUAL . INTVAR RPARENTH LBRACE func_block RBRACE

    INTVAR          shift and go to state 218


state 218

    (23) for_statement -> FOR LPARENTH INT VARNAME EQUAL INTVAR SEMICOLON VARNAME comparator INTVAR SEMICOLON VARNAME math_operator EQUAL INTVAR . RPARENTH LBRACE func_block RBRACE

    RPARENTH        shift and go to state 219


state 219

    (23) for_statement -> FOR LPARENTH INT VARNAME EQUAL INTVAR SEMICOLON VARNAME comparator INTVAR SEMICOLON VARNAME math_operator EQUAL INTVAR RPARENTH . LBRACE func_block RBRACE

    LBRACE          shift and go to state 220


state 220

    (23) for_statement -> FOR LPARENTH INT VARNAME EQUAL INTVAR SEMICOLON VARNAME comparator INTVAR SEMICOLON VARNAME math_operator EQUAL INTVAR RPARENTH LBRACE . func_block RBRACE
    (49) func_block -> . statement
    (50) func_block -> . statement return_statement
    (51) func_block -> . return_statement
    (52) statement -> . variable_def
    (53) statement -> . if_statement
    (54) statement -> . while_statement
    (55) statement -> . for_statement
    (56) statement -> . print_out
    (57) statement -> . cin_in
    (58) statement -> . VARNAME EQUAL calculation SEMICOLON
    (59) statement -> . assign_var
    (60) statement -> . statement statement
    (28) return_statement -> . RETURN var_value SEMICOLON
    (29) return_statement -> . RETURN SEMICOLON
    (32) variable_def -> . declare_var
    (33) variable_def -> . declare_assign_var
    (15) if_statement -> . IF LPARENTH condition RPARENTH LBRACE func_block RBRACE else_block
    (16) if_statement -> . IF LPARENTH condition RPARENTH LBRACE func_block RBRACE
    (22) while_statement -> . WHILE LPARENTH condition RPARENTH LBRACE func_block RBRACE
    (23) for_statement -> . FOR LPARENTH INT VARNAME EQUAL INTVAR SEMICOLON VARNAME comparator INTVAR SEMICOLON VARNAME math_operator EQUAL INTVAR RPARENTH LBRACE func_block RBRACE
    (24) for_statement -> . FOR LPARENTH SEMICOLON SEMICOLON RPARENTH LBRACE func_block RBRACE
    (61) print_out -> . COUT cout_expression_string SEMICOLON
    (76) cin_in -> . CIN RBIT VARNAME SEMICOLON
    (30) assign_var -> . VARNAME EQUAL var_value SEMICOLON
    (31) assign_var -> . VARNAME EQUAL calculation SEMICOLON
    (36) declare_var -> . type VARNAME SEMICOLON
    (34) declare_assign_var -> . type VARNAME EQUAL var_value SEMICOLON
    (35) declare_assign_var -> . type VARNAME EQUAL calculation SEMICOLON
    (71) type -> . INT
    (72) type -> . FLOAT
    (73) type -> . CHAR
    (74) type -> . STRING
    (75) type -> . BOOL

    VARNAME         shift and go to state 105
    RETURN          shift and go to state 107
    IF              shift and go to state 108
    WHILE           shift and go to state 109
    FOR             shift and go to state 110
    COUT            shift and go to state 111
    CIN             shift and go to state 112
    INT             shift and go to state 29
    FLOAT           shift and go to state 20
    CHAR            shift and go to state 21
    STRING          shift and go to state 22
    BOOL            shift and go to state 23

    func_block                     shift and go to state 221
    statement                      shift and go to state 97
    return_statement               shift and go to state 98
    variable_def                   shift and go to state 99
    if_statement                   shift and go to state 100
    while_statement                shift and go to state 101
    for_statement                  shift and go to state 102
    print_out                      shift and go to state 103
    cin_in                         shift and go to state 104
    assign_var                     shift and go to state 106
    declare_var                    shift and go to state 15
    declare_assign_var             shift and go to state 16
    type                           shift and go to state 113

state 221

    (23) for_statement -> FOR LPARENTH INT VARNAME EQUAL INTVAR SEMICOLON VARNAME comparator INTVAR SEMICOLON VARNAME math_operator EQUAL INTVAR RPARENTH LBRACE func_block . RBRACE

    RBRACE          shift and go to state 222


state 222

    (23) for_statement -> FOR LPARENTH INT VARNAME EQUAL INTVAR SEMICOLON VARNAME comparator INTVAR SEMICOLON VARNAME math_operator EQUAL INTVAR RPARENTH LBRACE func_block RBRACE .

    RETURN          reduce using rule 23 (for_statement -> FOR LPARENTH INT VARNAME EQUAL INTVAR SEMICOLON VARNAME comparator INTVAR SEMICOLON VARNAME math_operator EQUAL INTVAR RPARENTH LBRACE func_block RBRACE .)
    VARNAME         reduce using rule 23 (for_statement -> FOR LPARENTH INT VARNAME EQUAL INTVAR SEMICOLON VARNAME comparator INTVAR SEMICOLON VARNAME math_operator EQUAL INTVAR RPARENTH LBRACE func_block RBRACE .)
    IF              reduce using rule 23 (for_statement -> FOR LPARENTH INT VARNAME EQUAL INTVAR SEMICOLON VARNAME comparator INTVAR SEMICOLON VARNAME math_operator EQUAL INTVAR RPARENTH LBRACE func_block RBRACE .)
    WHILE           reduce using rule 23 (for_statement -> FOR LPARENTH INT VARNAME EQUAL INTVAR SEMICOLON VARNAME comparator INTVAR SEMICOLON VARNAME math_operator EQUAL INTVAR RPARENTH LBRACE func_block RBRACE .)
    FOR             reduce using rule 23 (for_statement -> FOR LPARENTH INT VARNAME EQUAL INTVAR SEMICOLON VARNAME comparator INTVAR SEMICOLON VARNAME math_operator EQUAL INTVAR RPARENTH LBRACE func_block RBRACE .)
    COUT            reduce using rule 23 (for_statement -> FOR LPARENTH INT VARNAME EQUAL INTVAR SEMICOLON VARNAME comparator INTVAR SEMICOLON VARNAME math_operator EQUAL INTVAR RPARENTH LBRACE func_block RBRACE .)
    CIN             reduce using rule 23 (for_statement -> FOR LPARENTH INT VARNAME EQUAL INTVAR SEMICOLON VARNAME comparator INTVAR SEMICOLON VARNAME math_operator EQUAL INTVAR RPARENTH LBRACE func_block RBRACE .)
    INT             reduce using rule 23 (for_statement -> FOR LPARENTH INT VARNAME EQUAL INTVAR SEMICOLON VARNAME comparator INTVAR SEMICOLON VARNAME math_operator EQUAL INTVAR RPARENTH LBRACE func_block RBRACE .)
    FLOAT           reduce using rule 23 (for_statement -> FOR LPARENTH INT VARNAME EQUAL INTVAR SEMICOLON VARNAME comparator INTVAR SEMICOLON VARNAME math_operator EQUAL INTVAR RPARENTH LBRACE func_block RBRACE .)
    CHAR            reduce using rule 23 (for_statement -> FOR LPARENTH INT VARNAME EQUAL INTVAR SEMICOLON VARNAME comparator INTVAR SEMICOLON VARNAME math_operator EQUAL INTVAR RPARENTH LBRACE func_block RBRACE .)
    STRING          reduce using rule 23 (for_statement -> FOR LPARENTH INT VARNAME EQUAL INTVAR SEMICOLON VARNAME comparator INTVAR SEMICOLON VARNAME math_operator EQUAL INTVAR RPARENTH LBRACE func_block RBRACE .)
    BOOL            reduce using rule 23 (for_statement -> FOR LPARENTH INT VARNAME EQUAL INTVAR SEMICOLON VARNAME comparator INTVAR SEMICOLON VARNAME math_operator EQUAL INTVAR RPARENTH LBRACE func_block RBRACE .)
    RBRACE          reduce using rule 23 (for_statement -> FOR LPARENTH INT VARNAME EQUAL INTVAR SEMICOLON VARNAME comparator INTVAR SEMICOLON VARNAME math_operator EQUAL INTVAR RPARENTH LBRACE func_block RBRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for VARNAME in state 19 resolved as shift
WARNING: shift/reduce conflict for VOID in state 27 resolved as shift
WARNING: shift/reduce conflict for INT in state 27 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 27 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 27 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 27 resolved as shift
WARNING: shift/reduce conflict for STRING in state 27 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 27 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 37 resolved as shift
WARNING: shift/reduce conflict for VOID in state 37 resolved as shift
WARNING: shift/reduce conflict for INT in state 37 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 37 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 37 resolved as shift
WARNING: shift/reduce conflict for STRING in state 37 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 37 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 75 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 75 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 75 resolved as shift
WARNING: shift/reduce conflict for VARNAME in state 75 resolved as shift
WARNING: shift/reduce conflict for INT in state 75 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 75 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 75 resolved as shift
WARNING: shift/reduce conflict for STRING in state 75 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 75 resolved as shift
WARNING: shift/reduce conflict for VARNAME in state 79 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 80 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 80 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 80 resolved as shift
WARNING: shift/reduce conflict for VOID in state 80 resolved as shift
WARNING: shift/reduce conflict for INT in state 80 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 80 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 80 resolved as shift
WARNING: shift/reduce conflict for STRING in state 80 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 80 resolved as shift
WARNING: shift/reduce conflict for VARNAME in state 133 resolved as shift
WARNING: shift/reduce conflict for IF in state 133 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 133 resolved as shift
WARNING: shift/reduce conflict for FOR in state 133 resolved as shift
WARNING: shift/reduce conflict for COUT in state 133 resolved as shift
WARNING: shift/reduce conflict for CIN in state 133 resolved as shift
WARNING: shift/reduce conflict for INT in state 133 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 133 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 133 resolved as shift
WARNING: shift/reduce conflict for STRING in state 133 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 133 resolved as shift
WARNING: reduce/reduce conflict in state 171 resolved using rule (printable -> STRINGVAR)
WARNING: rejected rule (var_value -> STRINGVAR) in state 171
WARNING: reduce/reduce conflict in state 175 resolved using rule (assign_var -> VARNAME EQUAL calculation SEMICOLON)
WARNING: rejected rule (statement -> VARNAME EQUAL calculation SEMICOLON) in state 175
WARNING: Rule (statement -> VARNAME EQUAL calculation SEMICOLON) is never reduced
